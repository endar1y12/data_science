{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1vbNe4LajkGr54CzPjPs1qLv72w737Lb5",
      "authorship_tag": "ABX9TyNb2mWAAq9zBzOfHofDLCwC",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/endar1y12/data_science/blob/main/latihan\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "vYj2eor9I5EF"
      },
      "outputs": [],
      "source": [
        "#library\n",
        "import numpy as np\n",
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#load data\n",
        "data = pd.read_csv('/content/drive/MyDrive/data/bank/bank-full.csv',sep =';')\n",
        "data2 = data\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "xhI7MR0DI_Jo",
        "outputId": "6b906f25-68ff-49f7-87de-5700fb02a633"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       age           job   marital  education default  balance housing loan  \\\n",
              "0       58    management   married   tertiary      no     2143     yes   no   \n",
              "1       44    technician    single  secondary      no       29     yes   no   \n",
              "2       33  entrepreneur   married  secondary      no        2     yes  yes   \n",
              "3       47   blue-collar   married    unknown      no     1506     yes   no   \n",
              "4       33       unknown    single    unknown      no        1      no   no   \n",
              "...    ...           ...       ...        ...     ...      ...     ...  ...   \n",
              "45206   51    technician   married   tertiary      no      825      no   no   \n",
              "45207   71       retired  divorced    primary      no     1729      no   no   \n",
              "45208   72       retired   married  secondary      no     5715      no   no   \n",
              "45209   57   blue-collar   married  secondary      no      668      no   no   \n",
              "45210   37  entrepreneur   married  secondary      no     2971      no   no   \n",
              "\n",
              "         contact  day month  duration  campaign  pdays  previous poutcome    y  \n",
              "0        unknown    5   may       261         1     -1         0  unknown   no  \n",
              "1        unknown    5   may       151         1     -1         0  unknown   no  \n",
              "2        unknown    5   may        76         1     -1         0  unknown   no  \n",
              "3        unknown    5   may        92         1     -1         0  unknown   no  \n",
              "4        unknown    5   may       198         1     -1         0  unknown   no  \n",
              "...          ...  ...   ...       ...       ...    ...       ...      ...  ...  \n",
              "45206   cellular   17   nov       977         3     -1         0  unknown  yes  \n",
              "45207   cellular   17   nov       456         2     -1         0  unknown  yes  \n",
              "45208   cellular   17   nov      1127         5    184         3  success  yes  \n",
              "45209  telephone   17   nov       508         4     -1         0  unknown   no  \n",
              "45210   cellular   17   nov       361         2    188        11    other   no  \n",
              "\n",
              "[45211 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e7be3fe0-c953-47df-b4f1-7e1feab2ab3a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>job</th>\n",
              "      <th>marital</th>\n",
              "      <th>education</th>\n",
              "      <th>default</th>\n",
              "      <th>balance</th>\n",
              "      <th>housing</th>\n",
              "      <th>loan</th>\n",
              "      <th>contact</th>\n",
              "      <th>day</th>\n",
              "      <th>month</th>\n",
              "      <th>duration</th>\n",
              "      <th>campaign</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>poutcome</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>58</td>\n",
              "      <td>management</td>\n",
              "      <td>married</td>\n",
              "      <td>tertiary</td>\n",
              "      <td>no</td>\n",
              "      <td>2143</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>261</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>44</td>\n",
              "      <td>technician</td>\n",
              "      <td>single</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>29</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>151</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>33</td>\n",
              "      <td>entrepreneur</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>2</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>76</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>47</td>\n",
              "      <td>blue-collar</td>\n",
              "      <td>married</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "      <td>1506</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>92</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>33</td>\n",
              "      <td>unknown</td>\n",
              "      <td>single</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "      <td>1</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>198</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45206</th>\n",
              "      <td>51</td>\n",
              "      <td>technician</td>\n",
              "      <td>married</td>\n",
              "      <td>tertiary</td>\n",
              "      <td>no</td>\n",
              "      <td>825</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>cellular</td>\n",
              "      <td>17</td>\n",
              "      <td>nov</td>\n",
              "      <td>977</td>\n",
              "      <td>3</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45207</th>\n",
              "      <td>71</td>\n",
              "      <td>retired</td>\n",
              "      <td>divorced</td>\n",
              "      <td>primary</td>\n",
              "      <td>no</td>\n",
              "      <td>1729</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>cellular</td>\n",
              "      <td>17</td>\n",
              "      <td>nov</td>\n",
              "      <td>456</td>\n",
              "      <td>2</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45208</th>\n",
              "      <td>72</td>\n",
              "      <td>retired</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>5715</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>cellular</td>\n",
              "      <td>17</td>\n",
              "      <td>nov</td>\n",
              "      <td>1127</td>\n",
              "      <td>5</td>\n",
              "      <td>184</td>\n",
              "      <td>3</td>\n",
              "      <td>success</td>\n",
              "      <td>yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45209</th>\n",
              "      <td>57</td>\n",
              "      <td>blue-collar</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>668</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>telephone</td>\n",
              "      <td>17</td>\n",
              "      <td>nov</td>\n",
              "      <td>508</td>\n",
              "      <td>4</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45210</th>\n",
              "      <td>37</td>\n",
              "      <td>entrepreneur</td>\n",
              "      <td>married</td>\n",
              "      <td>secondary</td>\n",
              "      <td>no</td>\n",
              "      <td>2971</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>cellular</td>\n",
              "      <td>17</td>\n",
              "      <td>nov</td>\n",
              "      <td>361</td>\n",
              "      <td>2</td>\n",
              "      <td>188</td>\n",
              "      <td>11</td>\n",
              "      <td>other</td>\n",
              "      <td>no</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>45211 rows × 17 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e7be3fe0-c953-47df-b4f1-7e1feab2ab3a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e7be3fe0-c953-47df-b4f1-7e1feab2ab3a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e7be3fe0-c953-47df-b4f1-7e1feab2ab3a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-72990e18-f527-466f-a6a5-b5d8367316a4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-72990e18-f527-466f-a6a5-b5d8367316a4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-72990e18-f527-466f-a6a5-b5d8367316a4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data['y'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FuV_byh8Jdc-",
        "outputId": "74d6f951-7696-4622-c692-5f936bd13db3"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "no     39922\n",
              "yes     5289\n",
              "Name: y, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Preprocessing Data"
      ],
      "metadata": {
        "id": "iMLCkIxrJlTC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data.isnull()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "9su6c8E2Jirr",
        "outputId": "49f7d054-046a-42b6-9be9-358dcdcc3581"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         age    job  marital  education  default  balance  housing   loan  \\\n",
              "0      False  False    False      False    False    False    False  False   \n",
              "1      False  False    False      False    False    False    False  False   \n",
              "2      False  False    False      False    False    False    False  False   \n",
              "3      False  False    False      False    False    False    False  False   \n",
              "4      False  False    False      False    False    False    False  False   \n",
              "...      ...    ...      ...        ...      ...      ...      ...    ...   \n",
              "45206  False  False    False      False    False    False    False  False   \n",
              "45207  False  False    False      False    False    False    False  False   \n",
              "45208  False  False    False      False    False    False    False  False   \n",
              "45209  False  False    False      False    False    False    False  False   \n",
              "45210  False  False    False      False    False    False    False  False   \n",
              "\n",
              "       contact    day  month  duration  campaign  pdays  previous  poutcome  \\\n",
              "0        False  False  False     False     False  False     False     False   \n",
              "1        False  False  False     False     False  False     False     False   \n",
              "2        False  False  False     False     False  False     False     False   \n",
              "3        False  False  False     False     False  False     False     False   \n",
              "4        False  False  False     False     False  False     False     False   \n",
              "...        ...    ...    ...       ...       ...    ...       ...       ...   \n",
              "45206    False  False  False     False     False  False     False     False   \n",
              "45207    False  False  False     False     False  False     False     False   \n",
              "45208    False  False  False     False     False  False     False     False   \n",
              "45209    False  False  False     False     False  False     False     False   \n",
              "45210    False  False  False     False     False  False     False     False   \n",
              "\n",
              "           y  \n",
              "0      False  \n",
              "1      False  \n",
              "2      False  \n",
              "3      False  \n",
              "4      False  \n",
              "...      ...  \n",
              "45206  False  \n",
              "45207  False  \n",
              "45208  False  \n",
              "45209  False  \n",
              "45210  False  \n",
              "\n",
              "[45211 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-57e83cd9-7cb1-4d31-b582-0ba2f7a6ef7a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>job</th>\n",
              "      <th>marital</th>\n",
              "      <th>education</th>\n",
              "      <th>default</th>\n",
              "      <th>balance</th>\n",
              "      <th>housing</th>\n",
              "      <th>loan</th>\n",
              "      <th>contact</th>\n",
              "      <th>day</th>\n",
              "      <th>month</th>\n",
              "      <th>duration</th>\n",
              "      <th>campaign</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>poutcome</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45206</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45207</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45208</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45209</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45210</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>45211 rows × 17 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-57e83cd9-7cb1-4d31-b582-0ba2f7a6ef7a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-57e83cd9-7cb1-4d31-b582-0ba2f7a6ef7a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-57e83cd9-7cb1-4d31-b582-0ba2f7a6ef7a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6e3077e0-1e83-4c7a-bea6-ccd50d920f51\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6e3077e0-1e83-4c7a-bea6-ccd50d920f51')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6e3077e0-1e83-4c7a-bea6-ccd50d920f51 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(data.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LO9cxOZIJqgT",
        "outputId": "273ab1c4-89f8-42e0-9a11-0fcb8b899f8e"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "age          0\n",
            "job          0\n",
            "marital      0\n",
            "education    0\n",
            "default      0\n",
            "balance      0\n",
            "housing      0\n",
            "loan         0\n",
            "contact      0\n",
            "day          0\n",
            "month        0\n",
            "duration     0\n",
            "campaign     0\n",
            "pdays        0\n",
            "previous     0\n",
            "poutcome     0\n",
            "y            0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "missing_values =[\"unknown\"]\n",
        "\n",
        "new_data = pd.read_csv('/content/drive/MyDrive/data/bank/bank-full.csv',sep =';',na_values = missing_values)\n",
        "\n",
        "print(new_data.isnull().sum())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V9nheWMlJuwl",
        "outputId": "f05c2187-5df8-49ff-9ece-8c91487d78d7"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "age              0\n",
            "job            288\n",
            "marital          0\n",
            "education     1857\n",
            "default          0\n",
            "balance          0\n",
            "housing          0\n",
            "loan             0\n",
            "contact      13020\n",
            "day              0\n",
            "month            0\n",
            "duration         0\n",
            "campaign         0\n",
            "pdays            0\n",
            "previous         0\n",
            "poutcome     36959\n",
            "y                0\n",
            "dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Handling Outliers\n",
        "\n",
        "#AGE\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import warnings\n",
        "import pandas as pd\n",
        "fig, axes = plt.subplots(figsize=(9,6))\n",
        "\n",
        "print(\"Age Shape :\",data.shape)\n",
        "\n",
        "max_val = data.age.quantile(0.75)\n",
        "min_val = data.age.quantile(0.25)\n",
        "\n",
        "sns.boxplot(data['age'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 539
        },
        "id": "Wy23Afm0KZ0y",
        "outputId": "d8b932db-50eb-4e61-ab88-f3b0a3c55ef1"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Age Shape : (45211, 17)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 900x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#BALANCE\n",
        "\n",
        "print('Balance Shape :',data.shape)\n",
        "\n",
        "max_val = data.balance.quantile(0.75)\n",
        "min_val = data.balance.quantile(0.25)\n",
        "\n",
        "sns.boxplot(data['balance'])\n",
        "plt.show()\n",
        "print(min_val)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 465
        },
        "id": "1PWR2iOLLMQW",
        "outputId": "d4b7a9e8-d786-4af4-f85d-1ea033b19101"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Balance Shape : (45211, 17)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "72.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = data[(data['balance']>-6000) & (data['balance']<50000)]\n",
        "\n",
        "print('After Balance Shape :',data.shape)\n",
        "\n",
        "sns.boxplot(data['balance'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "LCXJaimcLuny",
        "outputId": "686f1ffe-8fbd-4adb-db70-68f4986a54a4"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "After Balance Shape : (45191, 17)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#DAY\n",
        "\n",
        "fig, axes = plt.subplots(figsize=(9, 6))\n",
        "\n",
        "print(\"Day Shape :\",data.shape)\n",
        "\n",
        "max_cal = data.balance.quantile(0.75)\n",
        "min_val = data.balance.quantile(0.25)\n",
        "\n",
        "sns.boxplot(data['day'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 539
        },
        "id": "qJBmTuCmMNud",
        "outputId": "f07c739b-7409-4c8f-f2f6-9a74d63a9063"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Day Shape : (45191, 17)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 900x600 with 1 Axes>"
            ],
            "image/png": "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HPv2jvzE/5MNw4ET6BNAoVD4+MVhhwt0AGBCGNUwHDBLXAAAIBGBDgAAiQh0AABIRKADAEAiAh0AABIR6AAAkIhABwCARMYc6C+88EJcdtll0d7eHoVCIR5//PFR71933XVRKBRGbZdeemmt5gUAgIY25kAfHByMefPmxerVq/d7zKWXXhrvvPPOyPa73/3ukIYEAIDJYsx/SbS7uzu6u7s/95hisRhtbW0HPRQAAExW47IG/fnnn4+ZM2fGKaecEjfffHN88MEH+z22UqlEuVwetQEAwGRV80C/9NJL4+GHH46NGzfGz372s9i0aVN0d3fHvn37PvP4np6eKJVKI1tHR0etRwIAgAljzEtcvsg111wz8vHXvva1mDt3bpx00knx/PPPx8UXX/yp41euXBkrVqwYeV0ul0U6AACT1rg/ZvHEE0+MY445Jt54443PfL9YLEZLS8uoDQAAJqtxD/S33347PvjggzjuuOPG+1IAADDhjXmJy4cffjjqbvj27dtj69atMWPGjJgxY0bcfffdsWTJkmhra4s333wzbr/99jj55JNj0aJFNR0cAAAa0ZgD/ZVXXokLL7xw5PV/1o8vXbo01qxZE6+99lr85je/iV27dkV7e3tccskl8eMf/ziKxWLtpgYAgAY15kBfuHBhVKvV/b7/9NNPH9JAAAAwmY37GnQAAODACXQAAEhEoAMAQCICHQAAEhHoAACQiEAHAIBEBDoAACQi0AEAIBGBDgAAiQh0AABIRKADAEAiAh0AABIR6AAAkIhABwCARAQ6AAAkItABACARgQ4AAIkIdAAASESgAwBAIgIdAAASEegAAJCIQAcAgEQEOgAAJCLQAQAgEYEOAACJCHQAAEhEoAMAQCICHQAAEhHoAACQiEAHAIBEBDoAACQi0AEAIBGBDgAAiQh0AABIRKADAEAiAh0AABIR6AAAkIhABwCARAQ6AAAkItABACARgQ4AAIkIdAAASESgAwBAIgIdAAASEegAAJCIQAcAgEQEOgAAJCLQAQAgEYEOAACJCHQAAEhEoAMAQCICHQAAEhHoAACQiEAHAIBEBDoAACQi0AEAIBGBDgAAiQh0AABIRKADAEAiYw70F154IS677LJob2+PQqEQjz/++Kj3q9Vq3HnnnXHcccdFc3NzdHV1xeuvv16reQEAoKGNOdAHBwdj3rx5sXr16s98/957741f/vKX8eCDD8ZLL70UX/rSl2LRokUxNDR0yMMCAECjmzrWT+ju7o7u7u7PfK9arcaqVavijjvuiMsvvzwiIh5++OFobW2Nxx9/PK655ppDmxYAABpcTdegb9++Pfr6+qKrq2tkX6lUigULFsTmzZs/83MqlUqUy+VRGwAATFY1DfS+vr6IiGhtbR21v7W1deS9/9bT0xOlUmlk6+joqOVIAAAwodT9KS4rV66MgYGBkW3Hjh31HgkAAOqmpoHe1tYWERH9/f2j9vf394+899+KxWK0tLSM2gAAYLKqaaDPmTMn2traYuPGjSP7yuVyvPTSS9HZ2VnLSwEAQEMa81NcPvzww3jjjTdGXm/fvj22bt0aM2bMiNmzZ8ett94aP/nJT+LLX/5yzJkzJ374wx9Ge3t7XHHFFbWcGwAAGtKYA/2VV16JCy+8cOT1ihUrIiJi6dKlsXbt2rj99ttjcHAwvvvd78auXbvi/PPPjw0bNkRTU1PtpgYAgAY15kBfuHBhVKvV/b5fKBTinnvuiXvuueeQBgMAgMmo7k9xAQAAPibQAQAgEYEOAACJCHQAAEhEoAMAQCICHQAAEhHoAACQiEAHAIBEBDoAACQi0AEAIBGBDgAAiQh0AABIRKADAEAiAh0AABIR6AAAkIhABwCARAQ6AAAkItABACARgQ4AAIlMrfcAjE1h+F9RrfcQQGOoViOG//Xvj6dMjSgU6jsP0BAK//m+wkET6BPMkVt/V+8RAAAYR5a4AABAIu6gTwBNTU3R29tb7zGABjM0NBSLFy+OiIj169dHU1NTnScCGo3vKwdHoE8AhUIhmpub6z0G0MCampp8nwFIwhIXAABIRKADAEAiAh0AABIR6AAAkIhABwCARAQ6AAAkItABACARgQ4AAIkIdAAASESgAwBAIgIdAAASEegAAJCIQAcAgEQEOgAAJCLQAQAgEYEOAACJCHQAAEhEoAMAQCICHQAAEhHoAACQiEAHAIBEBDoAACQi0AEAIBGBDgAAiQh0AABIRKADAEAiAh0AABIR6AAAkIhABwCARAQ6AAAkItABACARgQ4AAIkIdAAASESgAwBAIgIdAAASqXmg/+hHP4pCoTBqO/XUU2t9GQAAaEhTx+OkX/3qV+PZZ5/9+CJTx+UyAADQcMalnKdOnRptbW3jcWoAAGho47IG/fXXX4/29vY48cQT49vf/na89dZb+z22UqlEuVwetQEAwGRV80BfsGBBrF27NjZs2BBr1qyJ7du3x9e//vXYvXv3Zx7f09MTpVJpZOvo6Kj1SAAAMGEUqtVqdTwvsGvXrjj++OPjvvvuixtuuOFT71cqlahUKiOvy+VydHR0xMDAQLS0tIznaACT2kcffRTd3d0REdHb2xvNzc11ngigsZXL5SiVSl/YueP+25tHHXVUfOUrX4k33njjM98vFotRLBbHewwAAJgQxv056B9++GG8+eabcdxxx433pQAAYMKreaB/73vfi02bNsU//vGP+OMf/xiLFy+Oww47LK699tpaXwoAABpOzZe4vP3223HttdfGBx98EMcee2ycf/758eKLL8axxx5b60sBAEDDqXmgP/LII7U+JQAATBrjvgYdAAA4cAIdAAASEegAAJCIQAcAgEQEOgAAJCLQAQAgEYEOAACJCHQAAEhEoAMAQCICHQAAEhHoAACQiEAHAIBEBDoAACQi0AEAIBGBDgAAiQh0AABIRKADAEAiAh0AABIR6AAAkIhABwCARAQ6AAAkItABACARgQ4AAIkIdAAASESgAwBAIgIdAAASEegAAJCIQAcAgEQEOgAAJCLQAQAgEYEOAACJCHQAAEhEoAMAQCICHQAAEhHoAACQiEAHAIBEBDoAACQi0AEAIBGBDgAAiQh0AABIRKADAEAiAh0AABIR6AAAkIhABwCARAQ6AAAkItABACARgQ4AAIlMrfcAQG1Vq9UYGhqq9xhMAJ/8OvE1w1g0NTVFoVCo9xjQsAQ6NJihoaHo7u6u9xhMMIsXL673CEwgvb290dzcXO8xoGFZ4gIAAIm4gw4NpqmpKXp7e+s9BhNAtVqNSqUSERHFYtGSBQ5YU1NTvUeAhibQocEUCgU/euaAHXHEEfUeAYD/YokLAAAkItABACARgQ4AAIkIdAAASESgAwBAIgIdAAASEegAAJDIuAX66tWr44QTToimpqZYsGBBvPzyy+N1KQAAaBjjEuiPPvporFixIu6666549dVXY968ebFo0aJ49913x+NyAADQMMYl0O+777648cYb4/rrr4/TTz89HnzwwTjiiCPi//7v/8bjcgAA0DBqHuh79uyJLVu2RFdX18cXmTIlurq6YvPmzZ86vlKpRLlcHrUBAMBkVfNAf//992Pfvn3R2to6an9ra2v09fV96vienp4olUojW0dHR61HAgCACaPuT3FZuXJlDAwMjGw7duyo90gAAFA3U2t9wmOOOSYOO+yw6O/vH7W/v78/2traPnV8sViMYrFY6zEAAGBCqvkd9GnTpsX8+fNj48aNI/uGh4dj48aN0dnZWevLAQBAQ6n5HfSIiBUrVsTSpUvjrLPOinPOOSdWrVoVg4ODcf3114/H5QAAoGGMS6BfffXV8d5778Wdd94ZfX19ceaZZ8aGDRs+9YujAADAaIVqtVqt9xCfNDAwEEcddVTs2LEjWlpa6j0OAADURLlcjo6Ojti1a1eUSqX9Hjcud9APxe7duyMiPG4RAICGtHv37s8N9HR30IeHh2Pnzp0xffr0KBQK9R4HoKH9526On1oCjL9qtRq7d++O9vb2mDJl/89qSRfoAPzvlMvlKJVKMTAwINABkqj7HyoCAAA+JtABACARgQ4wiRWLxbjrrrv8RWeARKxBBwCARNxBBwCARAQ6AAAkItABACARgQ4AAIkIdAAASESgA0xiq1evjhNOOCGamppiwYIF8fLLL9d7JIBJT6ADTFKPPvporFixIu6666549dVXY968ebFo0aJ499136z0awKTmOegAk9SCBQvi7LPPjl/96lcRETE8PBwdHR2xfPny+MEPflDn6QAmL3fQASahPXv2xJYtW6Krq2tk35QpU6Krqys2b95cx8kAEOgAk9D7778f+/bti9bW1lH7W1tbo6+vr05TARAh0AEAIBWBDjAJHXPMMXHYYYdFf3//qP39/f3R1tZWp6kAiBDoAJPStGnTYv78+bFx48aRfcPDw7Fx48bo7Oys42QATK33AADUx4oVK2Lp0qVx1llnxTnnnBOrVq2KwcHBuP766+s9GsCkJtABJqmrr7463nvvvbjzzjujr68vzjzzzNiwYcOnfnEUgP8tz0EHAIBErEEHAIBEBDoAACQi0AEAIBGBDgAAiQh0AABIRKADAEAiAh0AABIR6AAAkIhABwCARAQ6AAAkItABACCR/w/45HGS5r6bAAAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#DURATION\n",
        "\n",
        "print('Duration Shape :',data.shape)\n",
        "max_val = data.balance.quantile(0.75)\n",
        "min_val = data.balance.quantile(0.25)\n",
        "\n",
        "sns.boxplot(data['duration'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "JIHdVXAKMshh",
        "outputId": "044f8f1b-95f4-4b96-9d61-0e518367b71f"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Duration Shape : (45191, 17)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#remove\n",
        "\n",
        "data = data[(data['duration']<2600)]\n",
        "\n",
        "print(\"After Duration Shape :\",data.shape)\n",
        "\n",
        "sns.boxplot(data['duration'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "pJe_w0xeNIlb",
        "outputId": "a1a9c20a-6b2f-493b-cfec-a02998de1c7c"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "After Duration Shape : (45169, 17)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#CAMPAIGN\n",
        "\n",
        "print('Campaign Shape :',data.shape)\n",
        "\n",
        "max_val = data.campaign.quantile(0.75)\n",
        "min_val = data.campaign.quantile(0.25)\n",
        "\n",
        "sns.boxplot(data['campaign'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "dNomA-oTOFO2",
        "outputId": "e029e589-7e56-4902-f3e3-6d55bcef25dc"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Campaign Shape : (45169, 17)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#remove\n",
        "\n",
        "data = data[(data['campaign']<40)]\n",
        "\n",
        "print('After Campaign Shape :',data.shape)\n",
        "\n",
        "sns.boxplot(data['campaign'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "TudpXZsfOeiu",
        "outputId": "e461d487-8a10-43ba-95bb-d7851eec6bc1"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "After Campaign Shape : (45156, 17)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#PDAYS\n",
        "\n",
        "print('Pdays Shape :',data.shape)\n",
        "\n",
        "max_val = data.pdays.quantile(0.75)\n",
        "min_val = data.pdays.quantile(0.25)\n",
        "\n",
        "sns.boxplot(data['pdays'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "dVsUb9U0O1Mj",
        "outputId": "e66b8f4a-f5a3-458a-b841-206420fe0355"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Pdays Shape : (45156, 17)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#remove\n",
        "\n",
        "data =data[(data['pdays']<575)]\n",
        "\n",
        "print('After pdays Shape :',data.shape)\n",
        "\n",
        "sns.boxplot(data['pdays'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "2B5Xto08PPpK",
        "outputId": "a322188a-7311-4532-b2fa-8acbfd39a4c2"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "After pdays Shape : (45095, 17)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig, axes = plt.subplots(figsize=(9,6))\n",
        "\n",
        "print('Previous Shape :',data.shape)\n",
        "\n",
        "max_val=data.previous.quantile(0.75)\n",
        "min_val=data.previous.quantile(0.25)\n",
        "\n",
        "sns.boxplot(data['previous'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 539
        },
        "id": "z0njxz1APjT8",
        "outputId": "5fcca5a0-2d5c-4ce3-d530-285c2011b6c0"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Previous Shape : (45095, 17)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 900x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#remove\n",
        "\n",
        "data = data[(data['previous']<50)]\n",
        "\n",
        "print('After previous Shape :',data.shape)\n",
        "\n",
        "sns.boxplot(data['previous'])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "4Ujty5toQDpH",
        "outputId": "a7f279af-1d89-4170-93f5-506443afef4d"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "After previous Shape : (45092, 17)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Feature Encoding\n",
        "\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "\n",
        "data['y'] = LabelEncoder().fit_transform(data['y'])\n",
        "data['y']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4_GzGH4yQivT",
        "outputId": "00221259-d71f-4bf8-e319-329bf5017151"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0        0\n",
              "1        0\n",
              "2        0\n",
              "3        0\n",
              "4        0\n",
              "        ..\n",
              "45206    1\n",
              "45207    1\n",
              "45208    1\n",
              "45209    0\n",
              "45210    0\n",
              "Name: y, Length: 45092, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import OrdinalEncoder\n",
        "\n",
        "data['education'].value_counts()\n",
        "\n",
        "education_mapper = {\"unknown\":-1, \"primary\":1, \"secondary\":2, \"tertiary\":3}\n",
        "data[\"education\"] = data[\"education\"].replace(education_mapper)\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "pzXgoS29Q1lZ",
        "outputId": "e5a94cef-83f2-4308-afb0-fa9641b8cdb7"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       age           job   marital  education default  balance housing loan  \\\n",
              "0       58    management   married          3      no     2143     yes   no   \n",
              "1       44    technician    single          2      no       29     yes   no   \n",
              "2       33  entrepreneur   married          2      no        2     yes  yes   \n",
              "3       47   blue-collar   married         -1      no     1506     yes   no   \n",
              "4       33       unknown    single         -1      no        1      no   no   \n",
              "...    ...           ...       ...        ...     ...      ...     ...  ...   \n",
              "45206   51    technician   married          3      no      825      no   no   \n",
              "45207   71       retired  divorced          1      no     1729      no   no   \n",
              "45208   72       retired   married          2      no     5715      no   no   \n",
              "45209   57   blue-collar   married          2      no      668      no   no   \n",
              "45210   37  entrepreneur   married          2      no     2971      no   no   \n",
              "\n",
              "         contact  day month  duration  campaign  pdays  previous poutcome  y  \n",
              "0        unknown    5   may       261         1     -1         0  unknown  0  \n",
              "1        unknown    5   may       151         1     -1         0  unknown  0  \n",
              "2        unknown    5   may        76         1     -1         0  unknown  0  \n",
              "3        unknown    5   may        92         1     -1         0  unknown  0  \n",
              "4        unknown    5   may       198         1     -1         0  unknown  0  \n",
              "...          ...  ...   ...       ...       ...    ...       ...      ... ..  \n",
              "45206   cellular   17   nov       977         3     -1         0  unknown  1  \n",
              "45207   cellular   17   nov       456         2     -1         0  unknown  1  \n",
              "45208   cellular   17   nov      1127         5    184         3  success  1  \n",
              "45209  telephone   17   nov       508         4     -1         0  unknown  0  \n",
              "45210   cellular   17   nov       361         2    188        11    other  0  \n",
              "\n",
              "[45092 rows x 17 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-19e55ce8-e8e4-4875-b085-3b011278e9d7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>job</th>\n",
              "      <th>marital</th>\n",
              "      <th>education</th>\n",
              "      <th>default</th>\n",
              "      <th>balance</th>\n",
              "      <th>housing</th>\n",
              "      <th>loan</th>\n",
              "      <th>contact</th>\n",
              "      <th>day</th>\n",
              "      <th>month</th>\n",
              "      <th>duration</th>\n",
              "      <th>campaign</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>poutcome</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>58</td>\n",
              "      <td>management</td>\n",
              "      <td>married</td>\n",
              "      <td>3</td>\n",
              "      <td>no</td>\n",
              "      <td>2143</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>261</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>44</td>\n",
              "      <td>technician</td>\n",
              "      <td>single</td>\n",
              "      <td>2</td>\n",
              "      <td>no</td>\n",
              "      <td>29</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>151</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>33</td>\n",
              "      <td>entrepreneur</td>\n",
              "      <td>married</td>\n",
              "      <td>2</td>\n",
              "      <td>no</td>\n",
              "      <td>2</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>76</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>47</td>\n",
              "      <td>blue-collar</td>\n",
              "      <td>married</td>\n",
              "      <td>-1</td>\n",
              "      <td>no</td>\n",
              "      <td>1506</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>92</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>33</td>\n",
              "      <td>unknown</td>\n",
              "      <td>single</td>\n",
              "      <td>-1</td>\n",
              "      <td>no</td>\n",
              "      <td>1</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>198</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45206</th>\n",
              "      <td>51</td>\n",
              "      <td>technician</td>\n",
              "      <td>married</td>\n",
              "      <td>3</td>\n",
              "      <td>no</td>\n",
              "      <td>825</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>cellular</td>\n",
              "      <td>17</td>\n",
              "      <td>nov</td>\n",
              "      <td>977</td>\n",
              "      <td>3</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45207</th>\n",
              "      <td>71</td>\n",
              "      <td>retired</td>\n",
              "      <td>divorced</td>\n",
              "      <td>1</td>\n",
              "      <td>no</td>\n",
              "      <td>1729</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>cellular</td>\n",
              "      <td>17</td>\n",
              "      <td>nov</td>\n",
              "      <td>456</td>\n",
              "      <td>2</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45208</th>\n",
              "      <td>72</td>\n",
              "      <td>retired</td>\n",
              "      <td>married</td>\n",
              "      <td>2</td>\n",
              "      <td>no</td>\n",
              "      <td>5715</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>cellular</td>\n",
              "      <td>17</td>\n",
              "      <td>nov</td>\n",
              "      <td>1127</td>\n",
              "      <td>5</td>\n",
              "      <td>184</td>\n",
              "      <td>3</td>\n",
              "      <td>success</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45209</th>\n",
              "      <td>57</td>\n",
              "      <td>blue-collar</td>\n",
              "      <td>married</td>\n",
              "      <td>2</td>\n",
              "      <td>no</td>\n",
              "      <td>668</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>telephone</td>\n",
              "      <td>17</td>\n",
              "      <td>nov</td>\n",
              "      <td>508</td>\n",
              "      <td>4</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45210</th>\n",
              "      <td>37</td>\n",
              "      <td>entrepreneur</td>\n",
              "      <td>married</td>\n",
              "      <td>2</td>\n",
              "      <td>no</td>\n",
              "      <td>2971</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>cellular</td>\n",
              "      <td>17</td>\n",
              "      <td>nov</td>\n",
              "      <td>361</td>\n",
              "      <td>2</td>\n",
              "      <td>188</td>\n",
              "      <td>11</td>\n",
              "      <td>other</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>45092 rows × 17 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-19e55ce8-e8e4-4875-b085-3b011278e9d7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-19e55ce8-e8e4-4875-b085-3b011278e9d7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-19e55ce8-e8e4-4875-b085-3b011278e9d7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0920c2b7-b6be-4c08-a6ab-4512eecd1171\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0920c2b7-b6be-4c08-a6ab-4512eecd1171')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0920c2b7-b6be-4c08-a6ab-4512eecd1171 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#remove unwanted\n",
        "\n",
        "data.drop(['duration'], inplace=True, axis = 1)\n",
        "\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "FSOX-4wFRH0y",
        "outputId": "3ebe8798-d93d-4dc4-da92-fe10f9c44f8e"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       age           job   marital  education default  balance housing loan  \\\n",
              "0       58    management   married          3      no     2143     yes   no   \n",
              "1       44    technician    single          2      no       29     yes   no   \n",
              "2       33  entrepreneur   married          2      no        2     yes  yes   \n",
              "3       47   blue-collar   married         -1      no     1506     yes   no   \n",
              "4       33       unknown    single         -1      no        1      no   no   \n",
              "...    ...           ...       ...        ...     ...      ...     ...  ...   \n",
              "45206   51    technician   married          3      no      825      no   no   \n",
              "45207   71       retired  divorced          1      no     1729      no   no   \n",
              "45208   72       retired   married          2      no     5715      no   no   \n",
              "45209   57   blue-collar   married          2      no      668      no   no   \n",
              "45210   37  entrepreneur   married          2      no     2971      no   no   \n",
              "\n",
              "         contact  day month  campaign  pdays  previous poutcome  y  \n",
              "0        unknown    5   may         1     -1         0  unknown  0  \n",
              "1        unknown    5   may         1     -1         0  unknown  0  \n",
              "2        unknown    5   may         1     -1         0  unknown  0  \n",
              "3        unknown    5   may         1     -1         0  unknown  0  \n",
              "4        unknown    5   may         1     -1         0  unknown  0  \n",
              "...          ...  ...   ...       ...    ...       ...      ... ..  \n",
              "45206   cellular   17   nov         3     -1         0  unknown  1  \n",
              "45207   cellular   17   nov         2     -1         0  unknown  1  \n",
              "45208   cellular   17   nov         5    184         3  success  1  \n",
              "45209  telephone   17   nov         4     -1         0  unknown  0  \n",
              "45210   cellular   17   nov         2    188        11    other  0  \n",
              "\n",
              "[45092 rows x 16 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2c7c9c7d-6184-41d6-b427-12d3872f3e1d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>job</th>\n",
              "      <th>marital</th>\n",
              "      <th>education</th>\n",
              "      <th>default</th>\n",
              "      <th>balance</th>\n",
              "      <th>housing</th>\n",
              "      <th>loan</th>\n",
              "      <th>contact</th>\n",
              "      <th>day</th>\n",
              "      <th>month</th>\n",
              "      <th>campaign</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>poutcome</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>58</td>\n",
              "      <td>management</td>\n",
              "      <td>married</td>\n",
              "      <td>3</td>\n",
              "      <td>no</td>\n",
              "      <td>2143</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>44</td>\n",
              "      <td>technician</td>\n",
              "      <td>single</td>\n",
              "      <td>2</td>\n",
              "      <td>no</td>\n",
              "      <td>29</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>33</td>\n",
              "      <td>entrepreneur</td>\n",
              "      <td>married</td>\n",
              "      <td>2</td>\n",
              "      <td>no</td>\n",
              "      <td>2</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>47</td>\n",
              "      <td>blue-collar</td>\n",
              "      <td>married</td>\n",
              "      <td>-1</td>\n",
              "      <td>no</td>\n",
              "      <td>1506</td>\n",
              "      <td>yes</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>33</td>\n",
              "      <td>unknown</td>\n",
              "      <td>single</td>\n",
              "      <td>-1</td>\n",
              "      <td>no</td>\n",
              "      <td>1</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>unknown</td>\n",
              "      <td>5</td>\n",
              "      <td>may</td>\n",
              "      <td>1</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45206</th>\n",
              "      <td>51</td>\n",
              "      <td>technician</td>\n",
              "      <td>married</td>\n",
              "      <td>3</td>\n",
              "      <td>no</td>\n",
              "      <td>825</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>cellular</td>\n",
              "      <td>17</td>\n",
              "      <td>nov</td>\n",
              "      <td>3</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45207</th>\n",
              "      <td>71</td>\n",
              "      <td>retired</td>\n",
              "      <td>divorced</td>\n",
              "      <td>1</td>\n",
              "      <td>no</td>\n",
              "      <td>1729</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>cellular</td>\n",
              "      <td>17</td>\n",
              "      <td>nov</td>\n",
              "      <td>2</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45208</th>\n",
              "      <td>72</td>\n",
              "      <td>retired</td>\n",
              "      <td>married</td>\n",
              "      <td>2</td>\n",
              "      <td>no</td>\n",
              "      <td>5715</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>cellular</td>\n",
              "      <td>17</td>\n",
              "      <td>nov</td>\n",
              "      <td>5</td>\n",
              "      <td>184</td>\n",
              "      <td>3</td>\n",
              "      <td>success</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45209</th>\n",
              "      <td>57</td>\n",
              "      <td>blue-collar</td>\n",
              "      <td>married</td>\n",
              "      <td>2</td>\n",
              "      <td>no</td>\n",
              "      <td>668</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>telephone</td>\n",
              "      <td>17</td>\n",
              "      <td>nov</td>\n",
              "      <td>4</td>\n",
              "      <td>-1</td>\n",
              "      <td>0</td>\n",
              "      <td>unknown</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45210</th>\n",
              "      <td>37</td>\n",
              "      <td>entrepreneur</td>\n",
              "      <td>married</td>\n",
              "      <td>2</td>\n",
              "      <td>no</td>\n",
              "      <td>2971</td>\n",
              "      <td>no</td>\n",
              "      <td>no</td>\n",
              "      <td>cellular</td>\n",
              "      <td>17</td>\n",
              "      <td>nov</td>\n",
              "      <td>2</td>\n",
              "      <td>188</td>\n",
              "      <td>11</td>\n",
              "      <td>other</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>45092 rows × 16 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2c7c9c7d-6184-41d6-b427-12d3872f3e1d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2c7c9c7d-6184-41d6-b427-12d3872f3e1d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2c7c9c7d-6184-41d6-b427-12d3872f3e1d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7dc3c02a-f1a0-4718-8036-047ac0ca0db2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7dc3c02a-f1a0-4718-8036-047ac0ca0db2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7dc3c02a-f1a0-4718-8036-047ac0ca0db2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#using OneEncoding pandas.get_dummies\n",
        "\n",
        "categorial_features = ['job', 'marital', 'contact', 'month', 'poutcome']\n",
        "for item in categorial_features:\n",
        "    df = pd.get_dummies(data[item], prefix=item)\n",
        "    data = data.drop(item, axis=1)\n",
        "    for categorial_feature in df.columns:\n",
        "        data[categorial_feature] = df[categorial_feature]"
      ],
      "metadata": {
        "id": "siU7gFZyRaZz"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "binary_valued_features = ['default','housing', 'loan']\n",
        "bin_dict = {'yes':1, 'no':0}\n",
        "\n",
        "for item in binary_valued_features:\n",
        "    data.replace({item:bin_dict},inplace=True)"
      ],
      "metadata": {
        "id": "-1L2Kk2pRn2s"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#rearrange columns\n",
        "\n",
        "cols = list(data.columns.values)\n",
        "cols.pop(cols.index('y'))\n",
        "data = data[cols+['y']]\n"
      ],
      "metadata": {
        "id": "qmZvzL57RsQh"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 350
        },
        "id": "DMjq1xaXRzlz",
        "outputId": "1e30a430-b4d2-4c54-c3a7-2fa38f18891c"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                age     education       default       balance       housing  \\\n",
              "count  45092.000000  45092.000000  45092.000000  45092.000000  45092.000000   \n",
              "mean      40.929899      2.019139      0.018030   1337.164730      0.556041   \n",
              "std       10.614841      0.902716      0.133061   2742.702618      0.496855   \n",
              "min       18.000000     -1.000000      0.000000  -4057.000000      0.000000   \n",
              "25%       33.000000      2.000000      0.000000     72.000000      0.000000   \n",
              "50%       39.000000      2.000000      0.000000    448.000000      1.000000   \n",
              "75%       48.000000      3.000000      0.000000   1425.000000      1.000000   \n",
              "max       95.000000      3.000000      1.000000  45789.000000      1.000000   \n",
              "\n",
              "               loan           day      campaign         pdays      previous  \\\n",
              "count  45092.000000  45092.000000  45092.000000  45092.000000  45092.000000   \n",
              "mean       0.160206     15.807416      2.752905     39.302249      0.567019   \n",
              "std        0.366801      8.321816      3.000820     97.020071      1.844048   \n",
              "min        0.000000      1.000000      1.000000     -1.000000      0.000000   \n",
              "25%        0.000000      8.000000      1.000000     -1.000000      0.000000   \n",
              "50%        0.000000     16.000000      2.000000     -1.000000      0.000000   \n",
              "75%        0.000000     21.000000      3.000000     -1.000000      0.000000   \n",
              "max        1.000000     31.000000     39.000000    562.000000     40.000000   \n",
              "\n",
              "       ...     month_mar     month_may     month_nov     month_oct  \\\n",
              "count  ...  45092.000000  45092.000000  45092.000000  45092.000000   \n",
              "mean   ...      0.010490      0.304999      0.087954      0.016123   \n",
              "std    ...      0.101882      0.460412      0.283230      0.125948   \n",
              "min    ...      0.000000      0.000000      0.000000      0.000000   \n",
              "25%    ...      0.000000      0.000000      0.000000      0.000000   \n",
              "50%    ...      0.000000      0.000000      0.000000      0.000000   \n",
              "75%    ...      0.000000      1.000000      0.000000      0.000000   \n",
              "max    ...      1.000000      1.000000      1.000000      1.000000   \n",
              "\n",
              "          month_sep  poutcome_failure  poutcome_other  poutcome_success  \\\n",
              "count  45092.000000      45092.000000    45092.000000      45092.000000   \n",
              "mean       0.012353          0.107713        0.040384          0.033421   \n",
              "std        0.110455          0.310021        0.196861          0.179734   \n",
              "min        0.000000          0.000000        0.000000          0.000000   \n",
              "25%        0.000000          0.000000        0.000000          0.000000   \n",
              "50%        0.000000          0.000000        0.000000          0.000000   \n",
              "75%        0.000000          0.000000        0.000000          0.000000   \n",
              "max        1.000000          1.000000        1.000000          1.000000   \n",
              "\n",
              "       poutcome_unknown             y  \n",
              "count      45092.000000  45092.000000  \n",
              "mean           0.818482      0.116406  \n",
              "std            0.385451      0.320715  \n",
              "min            0.000000      0.000000  \n",
              "25%            1.000000      0.000000  \n",
              "50%            1.000000      0.000000  \n",
              "75%            1.000000      0.000000  \n",
              "max            1.000000      1.000000  \n",
              "\n",
              "[8 rows x 45 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-656f1c34-99a3-4096-a55c-794a649291b0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>education</th>\n",
              "      <th>default</th>\n",
              "      <th>balance</th>\n",
              "      <th>housing</th>\n",
              "      <th>loan</th>\n",
              "      <th>day</th>\n",
              "      <th>campaign</th>\n",
              "      <th>pdays</th>\n",
              "      <th>previous</th>\n",
              "      <th>...</th>\n",
              "      <th>month_mar</th>\n",
              "      <th>month_may</th>\n",
              "      <th>month_nov</th>\n",
              "      <th>month_oct</th>\n",
              "      <th>month_sep</th>\n",
              "      <th>poutcome_failure</th>\n",
              "      <th>poutcome_other</th>\n",
              "      <th>poutcome_success</th>\n",
              "      <th>poutcome_unknown</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>45092.000000</td>\n",
              "      <td>45092.000000</td>\n",
              "      <td>45092.000000</td>\n",
              "      <td>45092.000000</td>\n",
              "      <td>45092.000000</td>\n",
              "      <td>45092.000000</td>\n",
              "      <td>45092.000000</td>\n",
              "      <td>45092.000000</td>\n",
              "      <td>45092.000000</td>\n",
              "      <td>45092.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>45092.000000</td>\n",
              "      <td>45092.000000</td>\n",
              "      <td>45092.000000</td>\n",
              "      <td>45092.000000</td>\n",
              "      <td>45092.000000</td>\n",
              "      <td>45092.000000</td>\n",
              "      <td>45092.000000</td>\n",
              "      <td>45092.000000</td>\n",
              "      <td>45092.000000</td>\n",
              "      <td>45092.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>40.929899</td>\n",
              "      <td>2.019139</td>\n",
              "      <td>0.018030</td>\n",
              "      <td>1337.164730</td>\n",
              "      <td>0.556041</td>\n",
              "      <td>0.160206</td>\n",
              "      <td>15.807416</td>\n",
              "      <td>2.752905</td>\n",
              "      <td>39.302249</td>\n",
              "      <td>0.567019</td>\n",
              "      <td>...</td>\n",
              "      <td>0.010490</td>\n",
              "      <td>0.304999</td>\n",
              "      <td>0.087954</td>\n",
              "      <td>0.016123</td>\n",
              "      <td>0.012353</td>\n",
              "      <td>0.107713</td>\n",
              "      <td>0.040384</td>\n",
              "      <td>0.033421</td>\n",
              "      <td>0.818482</td>\n",
              "      <td>0.116406</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>10.614841</td>\n",
              "      <td>0.902716</td>\n",
              "      <td>0.133061</td>\n",
              "      <td>2742.702618</td>\n",
              "      <td>0.496855</td>\n",
              "      <td>0.366801</td>\n",
              "      <td>8.321816</td>\n",
              "      <td>3.000820</td>\n",
              "      <td>97.020071</td>\n",
              "      <td>1.844048</td>\n",
              "      <td>...</td>\n",
              "      <td>0.101882</td>\n",
              "      <td>0.460412</td>\n",
              "      <td>0.283230</td>\n",
              "      <td>0.125948</td>\n",
              "      <td>0.110455</td>\n",
              "      <td>0.310021</td>\n",
              "      <td>0.196861</td>\n",
              "      <td>0.179734</td>\n",
              "      <td>0.385451</td>\n",
              "      <td>0.320715</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>18.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>-4057.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>33.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>72.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>8.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>39.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>448.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>16.000000</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>48.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1425.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>21.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>-1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>95.000000</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>45789.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>31.000000</td>\n",
              "      <td>39.000000</td>\n",
              "      <td>562.000000</td>\n",
              "      <td>40.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 45 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-656f1c34-99a3-4096-a55c-794a649291b0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-656f1c34-99a3-4096-a55c-794a649291b0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-656f1c34-99a3-4096-a55c-794a649291b0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-39bc1198-044d-44b0-8d45-946494a3f60e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-39bc1198-044d-44b0-8d45-946494a3f60e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-39bc1198-044d-44b0-8d45-946494a3f60e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Splitting Data"
      ],
      "metadata": {
        "id": "4SWnGV4VSEOd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y = data['y']\n",
        "X = data.values[:, :-1] #kolom terakhir\n",
        "\n",
        "# spliting training and testing data\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=50)\n",
        ""
      ],
      "metadata": {
        "id": "7rXMjErJR3P3"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#feature Scaling"
      ],
      "metadata": {
        "id": "g2ozkn8qSdgG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# Feature scaling\n",
        "scaler = StandardScaler()\n",
        "scaler.fit(X)\n",
        "X_train = scaler.transform(X_train)\n",
        "X_test = scaler.transform(X_test)\n"
      ],
      "metadata": {
        "id": "STtQI2wzSBTt"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train = pd.DataFrame(X_train)\n",
        "X_test = pd.DataFrame(X_test)"
      ],
      "metadata": {
        "id": "oIMYQwmwShmS"
      },
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#Feature Enginering"
      ],
      "metadata": {
        "id": "sPffk40QSjtY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Correlation Matix\n",
        "correlation_matrix = pd.DataFrame(X_train).corr()\n",
        "fig, ax = plt.subplots(figsize=(10,10))\n",
        "sns.heatmap(correlation_matrix, ax=ax)\n",
        "correlation_matrix\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "EJn0CFGySnG0",
        "outputId": "72c2b166-6a21-4fda-dbb5-7bbcf4503358"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0         1         2         3         4         5         6   \\\n",
              "0   1.000000 -0.164160 -0.015227  0.086632 -0.179804 -0.016287 -0.007087   \n",
              "1  -0.164160  1.000000 -0.008288  0.046873 -0.021548  0.015159  0.018139   \n",
              "2  -0.015227 -0.008288  1.000000 -0.071413 -0.004733  0.070133  0.005912   \n",
              "3   0.086632  0.046873 -0.071413  1.000000 -0.064539 -0.090828  0.009663   \n",
              "4  -0.179804 -0.021548 -0.004733 -0.064539  1.000000  0.041551 -0.030964   \n",
              "5  -0.016287  0.015159  0.070133 -0.090828  0.041551  1.000000  0.010779   \n",
              "6  -0.007087  0.018139  0.005912  0.009663 -0.030964  0.010779  1.000000   \n",
              "7   0.005524  0.001410  0.016081 -0.016481 -0.029192  0.012088  0.167007   \n",
              "8  -0.026688  0.006897 -0.027990  0.003927  0.133308 -0.019148 -0.094614   \n",
              "9   0.002297  0.026724 -0.020866  0.025602  0.043427 -0.011602 -0.061620   \n",
              "10 -0.053430 -0.022010 -0.010927 -0.026260  0.042950  0.029686 -0.012678   \n",
              "11 -0.046026 -0.306875  0.012105 -0.051600  0.178240  0.022484 -0.023268   \n",
              "12  0.021753  0.030001  0.026482  0.004680  0.015230  0.035442 -0.001262   \n",
              "13  0.089869 -0.091424  0.000637  0.007631 -0.079964 -0.015702  0.003409   \n",
              "14 -0.024640  0.399608  0.002399  0.068451 -0.068157 -0.038554  0.015127   \n",
              "15  0.447124 -0.092202 -0.010992  0.042482 -0.154723 -0.012232 -0.008760   \n",
              "16 -0.007664  0.072204 -0.000147  0.017995 -0.027450 -0.004260  0.009912   \n",
              "17 -0.059451 -0.057029 -0.005781 -0.039262  0.069399  0.031589 -0.007507   \n",
              "18 -0.199933 -0.057469 -0.018181  0.005053 -0.085552 -0.058513 -0.016856   \n",
              "19 -0.071419  0.062998 -0.003457 -0.012946 -0.012886  0.011318  0.034591   \n",
              "20  0.003076 -0.014289  0.007834  0.008774 -0.043150 -0.034810 -0.003070   \n",
              "21  0.049217 -0.118527 -0.008266  0.013908 -0.074612 -0.031852 -0.008336   \n",
              "22  0.167251  0.010131  0.018405 -0.024636  0.001098  0.017297 -0.000222   \n",
              "23  0.284552 -0.112360 -0.012556  0.023283  0.018429  0.035055  0.009161   \n",
              "24 -0.427703  0.114895  0.000596 -0.007835 -0.020800 -0.050346 -0.009796   \n",
              "25 -0.070286  0.151680 -0.009017  0.016282 -0.153160  0.012107  0.020149   \n",
              "26  0.167962 -0.072612 -0.015262  0.033222 -0.078778 -0.006640  0.025289   \n",
              "27 -0.016785 -0.120673  0.017772 -0.035156  0.204181 -0.009175 -0.034941   \n",
              "28 -0.028933  0.005041 -0.026545  0.017947  0.081377 -0.024016  0.050078   \n",
              "29  0.075142  0.095718 -0.007383  0.006771 -0.306417 -0.070639  0.033704   \n",
              "30  0.019249  0.000377 -0.008984  0.016632 -0.051110 -0.020362 -0.009908   \n",
              "31 -0.004771  0.021399 -0.007702 -0.006904 -0.060830 -0.009667 -0.284591   \n",
              "32 -0.007162  0.010511 -0.006785 -0.026823 -0.066789 -0.006500  0.248698   \n",
              "33  0.003489 -0.014431  0.039730 -0.068199 -0.059941  0.168922  0.147445   \n",
              "34  0.052429 -0.068824  0.006028  0.033259 -0.106072 -0.025250 -0.196811   \n",
              "35  0.022825  0.018169 -0.014019  0.029632 -0.068011 -0.029853 -0.019449   \n",
              "36 -0.125761 -0.068977 -0.002881 -0.073507  0.426129 -0.025027 -0.026958   \n",
              "37  0.029050  0.051460  0.009799  0.124019  0.003226  0.015810  0.095247   \n",
              "38  0.061120  0.010865 -0.017395  0.045353 -0.089980 -0.030357  0.028929   \n",
              "39  0.033475  0.001384 -0.012491  0.018811 -0.074278 -0.031792 -0.053488   \n",
              "40 -0.008377  0.020024 -0.023488  0.016565  0.112398  0.000931 -0.069878   \n",
              "41 -0.021871  0.008748 -0.015419  0.008178  0.037032 -0.007114 -0.033025   \n",
              "42  0.032141  0.028548 -0.023613  0.033107 -0.087610 -0.052044 -0.028486   \n",
              "43  0.002919 -0.033866  0.037753 -0.032908 -0.068683  0.027069  0.086364   \n",
              "\n",
              "          7         8         9   ...        34        35        36        37  \\\n",
              "0   0.005524 -0.026688  0.002297  ...  0.052429  0.022825 -0.125761  0.029050   \n",
              "1   0.001410  0.006897  0.026724  ... -0.068824  0.018169 -0.068977  0.051460   \n",
              "2   0.016081 -0.027990 -0.020866  ...  0.006028 -0.014019 -0.002881  0.009799   \n",
              "3  -0.016481  0.003927  0.025602  ...  0.033259  0.029632 -0.073507  0.124019   \n",
              "4  -0.029192  0.133308  0.043427  ... -0.106072 -0.068011  0.426129  0.003226   \n",
              "5   0.012088 -0.019148 -0.011602  ... -0.025250 -0.029853 -0.025027  0.015810   \n",
              "6   0.167007 -0.094614 -0.061620  ... -0.196811 -0.019449 -0.026958  0.095247   \n",
              "7   1.000000 -0.088567 -0.037563  ...  0.039771 -0.018677 -0.074723 -0.087845   \n",
              "8  -0.088567  1.000000  0.555006  ... -0.117551  0.028234  0.088779  0.013275   \n",
              "9  -0.037563  0.555006  1.000000  ... -0.075735  0.032310  0.004265  0.052001   \n",
              "10 -0.023276  0.027819  0.023313  ... -0.005793  0.017802  0.028185 -0.004982   \n",
              "11  0.004331  0.020462 -0.023915  ...  0.022677 -0.043171  0.163917 -0.046800   \n",
              "12  0.002232 -0.013604 -0.011141  ...  0.014141 -0.016604 -0.010783  0.054759   \n",
              "13  0.003350 -0.033692 -0.016842  ...  0.057443  0.000288 -0.069078 -0.013563   \n",
              "14  0.018818 -0.008165  0.018705  ... -0.035616  0.019177 -0.083922  0.050214   \n",
              "15 -0.030499 -0.007012  0.009722  ...  0.011126  0.045255 -0.073433 -0.024283   \n",
              "16  0.010929 -0.010990 -0.004148  ...  0.007724 -0.002450 -0.030088  0.038438   \n",
              "17 -0.001459  0.007129 -0.014046  ...  0.010280 -0.018375  0.055007 -0.013280   \n",
              "18 -0.020584  0.025585  0.035139  ... -0.014274  0.045965 -0.009419 -0.016401   \n",
              "19  0.017365 -0.013921 -0.000897  ... -0.038083 -0.013018 -0.036455 -0.011455   \n",
              "20 -0.015414 -0.009360 -0.008714  ...  0.002679  0.008015 -0.034297  0.014497   \n",
              "21  0.012993 -0.017314 -0.012345  ...  0.051110  0.001405 -0.033219 -0.011954   \n",
              "22 -0.019078  0.003481 -0.003226  ...  0.012696 -0.005204  0.010694  0.006288   \n",
              "23  0.033837 -0.028798 -0.018549  ...  0.017731 -0.017288 -0.038674  0.018196   \n",
              "24 -0.023241  0.028820  0.022440  ... -0.028263  0.022471  0.034438 -0.024226   \n",
              "25 -0.023260  0.236325  0.162039  ... -0.391858  0.048820 -0.362008  0.158738   \n",
              "26  0.054327  0.015339  0.037591  ... -0.073749  0.023783 -0.083221  0.039034   \n",
              "27 -0.004875 -0.257556 -0.191251  ...  0.453215 -0.064364  0.426858 -0.188550   \n",
              "28 -0.069444  0.149295  0.070211  ... -0.096051 -0.027530 -0.174598 -0.081625   \n",
              "29  0.159575 -0.112173 -0.064303  ... -0.146913 -0.042109 -0.267055 -0.124849   \n",
              "30 -0.010558  0.048476  0.050632  ... -0.024562 -0.007040 -0.044647 -0.020873   \n",
              "31 -0.028424  0.074104  0.071945  ... -0.090389 -0.025908 -0.164308 -0.076814   \n",
              "32 -0.062673  0.056908  0.055307  ... -0.065249 -0.018702 -0.118608 -0.055450   \n",
              "33  0.108861 -0.140985 -0.101605  ... -0.154839 -0.044380 -0.281462 -0.131584   \n",
              "34  0.039771 -0.117551 -0.075735  ...  1.000000 -0.038330 -0.243090 -0.113645   \n",
              "35 -0.018677  0.028234  0.032310  ... -0.038330  1.000000 -0.069675 -0.032573   \n",
              "36 -0.074723  0.088779  0.004265  ... -0.243090 -0.069675  1.000000 -0.206581   \n",
              "37 -0.087845  0.013275  0.052001  ... -0.113645 -0.032573 -0.206581  1.000000   \n",
              "38 -0.053320  0.053665  0.066291  ... -0.047560 -0.013632 -0.086453 -0.040417   \n",
              "39 -0.035423  0.054546  0.071680  ... -0.039547 -0.011335 -0.071888 -0.033608   \n",
              "40 -0.088182  0.715263  0.436729  ... -0.097473  0.009984  0.032173  0.095535   \n",
              "41 -0.018895  0.384932  0.360163  ... -0.053934  0.018236  0.004821  0.026071   \n",
              "42 -0.059563  0.234780  0.252633  ... -0.024131  0.061154 -0.057431  0.004635   \n",
              "43  0.108394 -0.881427 -0.652595  ...  0.117210 -0.045758 -0.001676 -0.092422   \n",
              "\n",
              "          38        39        40        41        42        43  \n",
              "0   0.061120  0.033475 -0.008377 -0.021871  0.032141  0.002919  \n",
              "1   0.010865  0.001384  0.020024  0.008748  0.028548 -0.033866  \n",
              "2  -0.017395 -0.012491 -0.023488 -0.015419 -0.023613  0.037753  \n",
              "3   0.045353  0.018811  0.016565  0.008178  0.033107 -0.032908  \n",
              "4  -0.089980 -0.074278  0.112398  0.037032 -0.087610 -0.068683  \n",
              "5  -0.030357 -0.031792  0.000931 -0.007114 -0.052044  0.027069  \n",
              "6   0.028929 -0.053488 -0.069878 -0.033025 -0.028486  0.086364  \n",
              "7  -0.053320 -0.035423 -0.088182 -0.018895 -0.059563  0.108394  \n",
              "8   0.053665  0.054546  0.715263  0.384932  0.234780 -0.881427  \n",
              "9   0.066291  0.071680  0.436729  0.360163  0.252633 -0.652595  \n",
              "10  0.009132  0.009232  0.016243  0.011737  0.015092 -0.026078  \n",
              "11 -0.042252 -0.042742  0.002473 -0.002706 -0.050364  0.022805  \n",
              "12 -0.012266 -0.008690 -0.000211 -0.013737 -0.018309  0.015666  \n",
              "13  0.008511 -0.002396 -0.017287 -0.017076 -0.011403  0.027918  \n",
              "14  0.009450  0.022288  0.004011  0.006037  0.017075 -0.014243  \n",
              "15  0.086462  0.059179 -0.005580 -0.003959  0.058491 -0.020693  \n",
              "16 -0.008198 -0.005022 -0.004467 -0.002514  0.002687  0.003629  \n",
              "17 -0.030693 -0.021678  0.001143 -0.001226 -0.023844  0.010791  \n",
              "18  0.026117  0.050843  0.009046  0.038978  0.043782 -0.047462  \n",
              "19 -0.006591 -0.019010 -0.004145 -0.005799 -0.001837  0.007143  \n",
              "20  0.004063  0.001967 -0.012894 -0.003045  0.014268  0.005306  \n",
              "21  0.013571  0.016886 -0.010646 -0.013077 -0.001668  0.016003  \n",
              "22 -0.002178 -0.005765 -0.001144  0.003057 -0.005903  0.002114  \n",
              "23 -0.011378 -0.010427 -0.006884 -0.023622 -0.022812  0.028163  \n",
              "24  0.013905  0.015415  0.008290  0.023498  0.028969 -0.032096  \n",
              "25  0.033384  0.039109  0.204180  0.106340  0.105063 -0.267507  \n",
              "26  0.055199  0.021368  0.005555  0.024524  0.008213 -0.020760  \n",
              "27 -0.065089 -0.052815 -0.218357 -0.125432 -0.115256  0.293378  \n",
              "28 -0.034160 -0.028405  0.123209  0.059400  0.013655 -0.135863  \n",
              "29 -0.052249 -0.043446 -0.091921 -0.052854 -0.002453  0.102104  \n",
              "30 -0.008735 -0.007263  0.019324  0.032896  0.068534 -0.064170  \n",
              "31 -0.032146 -0.026730  0.072543  0.072392  0.026580 -0.107631  \n",
              "32 -0.023205 -0.019296  0.059670  0.058608  0.011664 -0.083311  \n",
              "33 -0.055067 -0.045790 -0.127574 -0.073718 -0.043143  0.160373  \n",
              "34 -0.047560 -0.039547 -0.097473 -0.053934 -0.024131  0.117210  \n",
              "35 -0.013632 -0.011335  0.009984  0.018236  0.061154 -0.045758  \n",
              "36 -0.086453 -0.071888  0.032173  0.004821 -0.057431 -0.001676  \n",
              "37 -0.040417 -0.033608  0.095535  0.026071  0.004635 -0.092422  \n",
              "38  1.000000 -0.014065  0.035661  0.026627  0.106541 -0.091831  \n",
              "39 -0.014065  1.000000  0.025795  0.032262  0.123240 -0.094508  \n",
              "40  0.035661  0.025795  1.000000 -0.071015 -0.064548 -0.740076  \n",
              "41  0.026627  0.032262 -0.071015  1.000000 -0.037793 -0.433312  \n",
              "42  0.106541  0.123240 -0.064548 -0.037793  1.000000 -0.393855  \n",
              "43 -0.091831 -0.094508 -0.740076 -0.433312 -0.393855  1.000000  \n",
              "\n",
              "[44 rows x 44 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b0b7c2d5-5edc-4a2e-a4c3-7061f5094243\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>34</th>\n",
              "      <th>35</th>\n",
              "      <th>36</th>\n",
              "      <th>37</th>\n",
              "      <th>38</th>\n",
              "      <th>39</th>\n",
              "      <th>40</th>\n",
              "      <th>41</th>\n",
              "      <th>42</th>\n",
              "      <th>43</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.164160</td>\n",
              "      <td>-0.015227</td>\n",
              "      <td>0.086632</td>\n",
              "      <td>-0.179804</td>\n",
              "      <td>-0.016287</td>\n",
              "      <td>-0.007087</td>\n",
              "      <td>0.005524</td>\n",
              "      <td>-0.026688</td>\n",
              "      <td>0.002297</td>\n",
              "      <td>...</td>\n",
              "      <td>0.052429</td>\n",
              "      <td>0.022825</td>\n",
              "      <td>-0.125761</td>\n",
              "      <td>0.029050</td>\n",
              "      <td>0.061120</td>\n",
              "      <td>0.033475</td>\n",
              "      <td>-0.008377</td>\n",
              "      <td>-0.021871</td>\n",
              "      <td>0.032141</td>\n",
              "      <td>0.002919</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.164160</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.008288</td>\n",
              "      <td>0.046873</td>\n",
              "      <td>-0.021548</td>\n",
              "      <td>0.015159</td>\n",
              "      <td>0.018139</td>\n",
              "      <td>0.001410</td>\n",
              "      <td>0.006897</td>\n",
              "      <td>0.026724</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.068824</td>\n",
              "      <td>0.018169</td>\n",
              "      <td>-0.068977</td>\n",
              "      <td>0.051460</td>\n",
              "      <td>0.010865</td>\n",
              "      <td>0.001384</td>\n",
              "      <td>0.020024</td>\n",
              "      <td>0.008748</td>\n",
              "      <td>0.028548</td>\n",
              "      <td>-0.033866</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.015227</td>\n",
              "      <td>-0.008288</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.071413</td>\n",
              "      <td>-0.004733</td>\n",
              "      <td>0.070133</td>\n",
              "      <td>0.005912</td>\n",
              "      <td>0.016081</td>\n",
              "      <td>-0.027990</td>\n",
              "      <td>-0.020866</td>\n",
              "      <td>...</td>\n",
              "      <td>0.006028</td>\n",
              "      <td>-0.014019</td>\n",
              "      <td>-0.002881</td>\n",
              "      <td>0.009799</td>\n",
              "      <td>-0.017395</td>\n",
              "      <td>-0.012491</td>\n",
              "      <td>-0.023488</td>\n",
              "      <td>-0.015419</td>\n",
              "      <td>-0.023613</td>\n",
              "      <td>0.037753</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.086632</td>\n",
              "      <td>0.046873</td>\n",
              "      <td>-0.071413</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.064539</td>\n",
              "      <td>-0.090828</td>\n",
              "      <td>0.009663</td>\n",
              "      <td>-0.016481</td>\n",
              "      <td>0.003927</td>\n",
              "      <td>0.025602</td>\n",
              "      <td>...</td>\n",
              "      <td>0.033259</td>\n",
              "      <td>0.029632</td>\n",
              "      <td>-0.073507</td>\n",
              "      <td>0.124019</td>\n",
              "      <td>0.045353</td>\n",
              "      <td>0.018811</td>\n",
              "      <td>0.016565</td>\n",
              "      <td>0.008178</td>\n",
              "      <td>0.033107</td>\n",
              "      <td>-0.032908</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.179804</td>\n",
              "      <td>-0.021548</td>\n",
              "      <td>-0.004733</td>\n",
              "      <td>-0.064539</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.041551</td>\n",
              "      <td>-0.030964</td>\n",
              "      <td>-0.029192</td>\n",
              "      <td>0.133308</td>\n",
              "      <td>0.043427</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.106072</td>\n",
              "      <td>-0.068011</td>\n",
              "      <td>0.426129</td>\n",
              "      <td>0.003226</td>\n",
              "      <td>-0.089980</td>\n",
              "      <td>-0.074278</td>\n",
              "      <td>0.112398</td>\n",
              "      <td>0.037032</td>\n",
              "      <td>-0.087610</td>\n",
              "      <td>-0.068683</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>-0.016287</td>\n",
              "      <td>0.015159</td>\n",
              "      <td>0.070133</td>\n",
              "      <td>-0.090828</td>\n",
              "      <td>0.041551</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.010779</td>\n",
              "      <td>0.012088</td>\n",
              "      <td>-0.019148</td>\n",
              "      <td>-0.011602</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.025250</td>\n",
              "      <td>-0.029853</td>\n",
              "      <td>-0.025027</td>\n",
              "      <td>0.015810</td>\n",
              "      <td>-0.030357</td>\n",
              "      <td>-0.031792</td>\n",
              "      <td>0.000931</td>\n",
              "      <td>-0.007114</td>\n",
              "      <td>-0.052044</td>\n",
              "      <td>0.027069</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>-0.007087</td>\n",
              "      <td>0.018139</td>\n",
              "      <td>0.005912</td>\n",
              "      <td>0.009663</td>\n",
              "      <td>-0.030964</td>\n",
              "      <td>0.010779</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.167007</td>\n",
              "      <td>-0.094614</td>\n",
              "      <td>-0.061620</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.196811</td>\n",
              "      <td>-0.019449</td>\n",
              "      <td>-0.026958</td>\n",
              "      <td>0.095247</td>\n",
              "      <td>0.028929</td>\n",
              "      <td>-0.053488</td>\n",
              "      <td>-0.069878</td>\n",
              "      <td>-0.033025</td>\n",
              "      <td>-0.028486</td>\n",
              "      <td>0.086364</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0.005524</td>\n",
              "      <td>0.001410</td>\n",
              "      <td>0.016081</td>\n",
              "      <td>-0.016481</td>\n",
              "      <td>-0.029192</td>\n",
              "      <td>0.012088</td>\n",
              "      <td>0.167007</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.088567</td>\n",
              "      <td>-0.037563</td>\n",
              "      <td>...</td>\n",
              "      <td>0.039771</td>\n",
              "      <td>-0.018677</td>\n",
              "      <td>-0.074723</td>\n",
              "      <td>-0.087845</td>\n",
              "      <td>-0.053320</td>\n",
              "      <td>-0.035423</td>\n",
              "      <td>-0.088182</td>\n",
              "      <td>-0.018895</td>\n",
              "      <td>-0.059563</td>\n",
              "      <td>0.108394</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>-0.026688</td>\n",
              "      <td>0.006897</td>\n",
              "      <td>-0.027990</td>\n",
              "      <td>0.003927</td>\n",
              "      <td>0.133308</td>\n",
              "      <td>-0.019148</td>\n",
              "      <td>-0.094614</td>\n",
              "      <td>-0.088567</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.555006</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.117551</td>\n",
              "      <td>0.028234</td>\n",
              "      <td>0.088779</td>\n",
              "      <td>0.013275</td>\n",
              "      <td>0.053665</td>\n",
              "      <td>0.054546</td>\n",
              "      <td>0.715263</td>\n",
              "      <td>0.384932</td>\n",
              "      <td>0.234780</td>\n",
              "      <td>-0.881427</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.002297</td>\n",
              "      <td>0.026724</td>\n",
              "      <td>-0.020866</td>\n",
              "      <td>0.025602</td>\n",
              "      <td>0.043427</td>\n",
              "      <td>-0.011602</td>\n",
              "      <td>-0.061620</td>\n",
              "      <td>-0.037563</td>\n",
              "      <td>0.555006</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.075735</td>\n",
              "      <td>0.032310</td>\n",
              "      <td>0.004265</td>\n",
              "      <td>0.052001</td>\n",
              "      <td>0.066291</td>\n",
              "      <td>0.071680</td>\n",
              "      <td>0.436729</td>\n",
              "      <td>0.360163</td>\n",
              "      <td>0.252633</td>\n",
              "      <td>-0.652595</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>-0.053430</td>\n",
              "      <td>-0.022010</td>\n",
              "      <td>-0.010927</td>\n",
              "      <td>-0.026260</td>\n",
              "      <td>0.042950</td>\n",
              "      <td>0.029686</td>\n",
              "      <td>-0.012678</td>\n",
              "      <td>-0.023276</td>\n",
              "      <td>0.027819</td>\n",
              "      <td>0.023313</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.005793</td>\n",
              "      <td>0.017802</td>\n",
              "      <td>0.028185</td>\n",
              "      <td>-0.004982</td>\n",
              "      <td>0.009132</td>\n",
              "      <td>0.009232</td>\n",
              "      <td>0.016243</td>\n",
              "      <td>0.011737</td>\n",
              "      <td>0.015092</td>\n",
              "      <td>-0.026078</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>-0.046026</td>\n",
              "      <td>-0.306875</td>\n",
              "      <td>0.012105</td>\n",
              "      <td>-0.051600</td>\n",
              "      <td>0.178240</td>\n",
              "      <td>0.022484</td>\n",
              "      <td>-0.023268</td>\n",
              "      <td>0.004331</td>\n",
              "      <td>0.020462</td>\n",
              "      <td>-0.023915</td>\n",
              "      <td>...</td>\n",
              "      <td>0.022677</td>\n",
              "      <td>-0.043171</td>\n",
              "      <td>0.163917</td>\n",
              "      <td>-0.046800</td>\n",
              "      <td>-0.042252</td>\n",
              "      <td>-0.042742</td>\n",
              "      <td>0.002473</td>\n",
              "      <td>-0.002706</td>\n",
              "      <td>-0.050364</td>\n",
              "      <td>0.022805</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0.021753</td>\n",
              "      <td>0.030001</td>\n",
              "      <td>0.026482</td>\n",
              "      <td>0.004680</td>\n",
              "      <td>0.015230</td>\n",
              "      <td>0.035442</td>\n",
              "      <td>-0.001262</td>\n",
              "      <td>0.002232</td>\n",
              "      <td>-0.013604</td>\n",
              "      <td>-0.011141</td>\n",
              "      <td>...</td>\n",
              "      <td>0.014141</td>\n",
              "      <td>-0.016604</td>\n",
              "      <td>-0.010783</td>\n",
              "      <td>0.054759</td>\n",
              "      <td>-0.012266</td>\n",
              "      <td>-0.008690</td>\n",
              "      <td>-0.000211</td>\n",
              "      <td>-0.013737</td>\n",
              "      <td>-0.018309</td>\n",
              "      <td>0.015666</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>0.089869</td>\n",
              "      <td>-0.091424</td>\n",
              "      <td>0.000637</td>\n",
              "      <td>0.007631</td>\n",
              "      <td>-0.079964</td>\n",
              "      <td>-0.015702</td>\n",
              "      <td>0.003409</td>\n",
              "      <td>0.003350</td>\n",
              "      <td>-0.033692</td>\n",
              "      <td>-0.016842</td>\n",
              "      <td>...</td>\n",
              "      <td>0.057443</td>\n",
              "      <td>0.000288</td>\n",
              "      <td>-0.069078</td>\n",
              "      <td>-0.013563</td>\n",
              "      <td>0.008511</td>\n",
              "      <td>-0.002396</td>\n",
              "      <td>-0.017287</td>\n",
              "      <td>-0.017076</td>\n",
              "      <td>-0.011403</td>\n",
              "      <td>0.027918</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>-0.024640</td>\n",
              "      <td>0.399608</td>\n",
              "      <td>0.002399</td>\n",
              "      <td>0.068451</td>\n",
              "      <td>-0.068157</td>\n",
              "      <td>-0.038554</td>\n",
              "      <td>0.015127</td>\n",
              "      <td>0.018818</td>\n",
              "      <td>-0.008165</td>\n",
              "      <td>0.018705</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.035616</td>\n",
              "      <td>0.019177</td>\n",
              "      <td>-0.083922</td>\n",
              "      <td>0.050214</td>\n",
              "      <td>0.009450</td>\n",
              "      <td>0.022288</td>\n",
              "      <td>0.004011</td>\n",
              "      <td>0.006037</td>\n",
              "      <td>0.017075</td>\n",
              "      <td>-0.014243</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>0.447124</td>\n",
              "      <td>-0.092202</td>\n",
              "      <td>-0.010992</td>\n",
              "      <td>0.042482</td>\n",
              "      <td>-0.154723</td>\n",
              "      <td>-0.012232</td>\n",
              "      <td>-0.008760</td>\n",
              "      <td>-0.030499</td>\n",
              "      <td>-0.007012</td>\n",
              "      <td>0.009722</td>\n",
              "      <td>...</td>\n",
              "      <td>0.011126</td>\n",
              "      <td>0.045255</td>\n",
              "      <td>-0.073433</td>\n",
              "      <td>-0.024283</td>\n",
              "      <td>0.086462</td>\n",
              "      <td>0.059179</td>\n",
              "      <td>-0.005580</td>\n",
              "      <td>-0.003959</td>\n",
              "      <td>0.058491</td>\n",
              "      <td>-0.020693</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>-0.007664</td>\n",
              "      <td>0.072204</td>\n",
              "      <td>-0.000147</td>\n",
              "      <td>0.017995</td>\n",
              "      <td>-0.027450</td>\n",
              "      <td>-0.004260</td>\n",
              "      <td>0.009912</td>\n",
              "      <td>0.010929</td>\n",
              "      <td>-0.010990</td>\n",
              "      <td>-0.004148</td>\n",
              "      <td>...</td>\n",
              "      <td>0.007724</td>\n",
              "      <td>-0.002450</td>\n",
              "      <td>-0.030088</td>\n",
              "      <td>0.038438</td>\n",
              "      <td>-0.008198</td>\n",
              "      <td>-0.005022</td>\n",
              "      <td>-0.004467</td>\n",
              "      <td>-0.002514</td>\n",
              "      <td>0.002687</td>\n",
              "      <td>0.003629</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>-0.059451</td>\n",
              "      <td>-0.057029</td>\n",
              "      <td>-0.005781</td>\n",
              "      <td>-0.039262</td>\n",
              "      <td>0.069399</td>\n",
              "      <td>0.031589</td>\n",
              "      <td>-0.007507</td>\n",
              "      <td>-0.001459</td>\n",
              "      <td>0.007129</td>\n",
              "      <td>-0.014046</td>\n",
              "      <td>...</td>\n",
              "      <td>0.010280</td>\n",
              "      <td>-0.018375</td>\n",
              "      <td>0.055007</td>\n",
              "      <td>-0.013280</td>\n",
              "      <td>-0.030693</td>\n",
              "      <td>-0.021678</td>\n",
              "      <td>0.001143</td>\n",
              "      <td>-0.001226</td>\n",
              "      <td>-0.023844</td>\n",
              "      <td>0.010791</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>-0.199933</td>\n",
              "      <td>-0.057469</td>\n",
              "      <td>-0.018181</td>\n",
              "      <td>0.005053</td>\n",
              "      <td>-0.085552</td>\n",
              "      <td>-0.058513</td>\n",
              "      <td>-0.016856</td>\n",
              "      <td>-0.020584</td>\n",
              "      <td>0.025585</td>\n",
              "      <td>0.035139</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.014274</td>\n",
              "      <td>0.045965</td>\n",
              "      <td>-0.009419</td>\n",
              "      <td>-0.016401</td>\n",
              "      <td>0.026117</td>\n",
              "      <td>0.050843</td>\n",
              "      <td>0.009046</td>\n",
              "      <td>0.038978</td>\n",
              "      <td>0.043782</td>\n",
              "      <td>-0.047462</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>-0.071419</td>\n",
              "      <td>0.062998</td>\n",
              "      <td>-0.003457</td>\n",
              "      <td>-0.012946</td>\n",
              "      <td>-0.012886</td>\n",
              "      <td>0.011318</td>\n",
              "      <td>0.034591</td>\n",
              "      <td>0.017365</td>\n",
              "      <td>-0.013921</td>\n",
              "      <td>-0.000897</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.038083</td>\n",
              "      <td>-0.013018</td>\n",
              "      <td>-0.036455</td>\n",
              "      <td>-0.011455</td>\n",
              "      <td>-0.006591</td>\n",
              "      <td>-0.019010</td>\n",
              "      <td>-0.004145</td>\n",
              "      <td>-0.005799</td>\n",
              "      <td>-0.001837</td>\n",
              "      <td>0.007143</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>0.003076</td>\n",
              "      <td>-0.014289</td>\n",
              "      <td>0.007834</td>\n",
              "      <td>0.008774</td>\n",
              "      <td>-0.043150</td>\n",
              "      <td>-0.034810</td>\n",
              "      <td>-0.003070</td>\n",
              "      <td>-0.015414</td>\n",
              "      <td>-0.009360</td>\n",
              "      <td>-0.008714</td>\n",
              "      <td>...</td>\n",
              "      <td>0.002679</td>\n",
              "      <td>0.008015</td>\n",
              "      <td>-0.034297</td>\n",
              "      <td>0.014497</td>\n",
              "      <td>0.004063</td>\n",
              "      <td>0.001967</td>\n",
              "      <td>-0.012894</td>\n",
              "      <td>-0.003045</td>\n",
              "      <td>0.014268</td>\n",
              "      <td>0.005306</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>0.049217</td>\n",
              "      <td>-0.118527</td>\n",
              "      <td>-0.008266</td>\n",
              "      <td>0.013908</td>\n",
              "      <td>-0.074612</td>\n",
              "      <td>-0.031852</td>\n",
              "      <td>-0.008336</td>\n",
              "      <td>0.012993</td>\n",
              "      <td>-0.017314</td>\n",
              "      <td>-0.012345</td>\n",
              "      <td>...</td>\n",
              "      <td>0.051110</td>\n",
              "      <td>0.001405</td>\n",
              "      <td>-0.033219</td>\n",
              "      <td>-0.011954</td>\n",
              "      <td>0.013571</td>\n",
              "      <td>0.016886</td>\n",
              "      <td>-0.010646</td>\n",
              "      <td>-0.013077</td>\n",
              "      <td>-0.001668</td>\n",
              "      <td>0.016003</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>0.167251</td>\n",
              "      <td>0.010131</td>\n",
              "      <td>0.018405</td>\n",
              "      <td>-0.024636</td>\n",
              "      <td>0.001098</td>\n",
              "      <td>0.017297</td>\n",
              "      <td>-0.000222</td>\n",
              "      <td>-0.019078</td>\n",
              "      <td>0.003481</td>\n",
              "      <td>-0.003226</td>\n",
              "      <td>...</td>\n",
              "      <td>0.012696</td>\n",
              "      <td>-0.005204</td>\n",
              "      <td>0.010694</td>\n",
              "      <td>0.006288</td>\n",
              "      <td>-0.002178</td>\n",
              "      <td>-0.005765</td>\n",
              "      <td>-0.001144</td>\n",
              "      <td>0.003057</td>\n",
              "      <td>-0.005903</td>\n",
              "      <td>0.002114</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>0.284552</td>\n",
              "      <td>-0.112360</td>\n",
              "      <td>-0.012556</td>\n",
              "      <td>0.023283</td>\n",
              "      <td>0.018429</td>\n",
              "      <td>0.035055</td>\n",
              "      <td>0.009161</td>\n",
              "      <td>0.033837</td>\n",
              "      <td>-0.028798</td>\n",
              "      <td>-0.018549</td>\n",
              "      <td>...</td>\n",
              "      <td>0.017731</td>\n",
              "      <td>-0.017288</td>\n",
              "      <td>-0.038674</td>\n",
              "      <td>0.018196</td>\n",
              "      <td>-0.011378</td>\n",
              "      <td>-0.010427</td>\n",
              "      <td>-0.006884</td>\n",
              "      <td>-0.023622</td>\n",
              "      <td>-0.022812</td>\n",
              "      <td>0.028163</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>-0.427703</td>\n",
              "      <td>0.114895</td>\n",
              "      <td>0.000596</td>\n",
              "      <td>-0.007835</td>\n",
              "      <td>-0.020800</td>\n",
              "      <td>-0.050346</td>\n",
              "      <td>-0.009796</td>\n",
              "      <td>-0.023241</td>\n",
              "      <td>0.028820</td>\n",
              "      <td>0.022440</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.028263</td>\n",
              "      <td>0.022471</td>\n",
              "      <td>0.034438</td>\n",
              "      <td>-0.024226</td>\n",
              "      <td>0.013905</td>\n",
              "      <td>0.015415</td>\n",
              "      <td>0.008290</td>\n",
              "      <td>0.023498</td>\n",
              "      <td>0.028969</td>\n",
              "      <td>-0.032096</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>-0.070286</td>\n",
              "      <td>0.151680</td>\n",
              "      <td>-0.009017</td>\n",
              "      <td>0.016282</td>\n",
              "      <td>-0.153160</td>\n",
              "      <td>0.012107</td>\n",
              "      <td>0.020149</td>\n",
              "      <td>-0.023260</td>\n",
              "      <td>0.236325</td>\n",
              "      <td>0.162039</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.391858</td>\n",
              "      <td>0.048820</td>\n",
              "      <td>-0.362008</td>\n",
              "      <td>0.158738</td>\n",
              "      <td>0.033384</td>\n",
              "      <td>0.039109</td>\n",
              "      <td>0.204180</td>\n",
              "      <td>0.106340</td>\n",
              "      <td>0.105063</td>\n",
              "      <td>-0.267507</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>0.167962</td>\n",
              "      <td>-0.072612</td>\n",
              "      <td>-0.015262</td>\n",
              "      <td>0.033222</td>\n",
              "      <td>-0.078778</td>\n",
              "      <td>-0.006640</td>\n",
              "      <td>0.025289</td>\n",
              "      <td>0.054327</td>\n",
              "      <td>0.015339</td>\n",
              "      <td>0.037591</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.073749</td>\n",
              "      <td>0.023783</td>\n",
              "      <td>-0.083221</td>\n",
              "      <td>0.039034</td>\n",
              "      <td>0.055199</td>\n",
              "      <td>0.021368</td>\n",
              "      <td>0.005555</td>\n",
              "      <td>0.024524</td>\n",
              "      <td>0.008213</td>\n",
              "      <td>-0.020760</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>-0.016785</td>\n",
              "      <td>-0.120673</td>\n",
              "      <td>0.017772</td>\n",
              "      <td>-0.035156</td>\n",
              "      <td>0.204181</td>\n",
              "      <td>-0.009175</td>\n",
              "      <td>-0.034941</td>\n",
              "      <td>-0.004875</td>\n",
              "      <td>-0.257556</td>\n",
              "      <td>-0.191251</td>\n",
              "      <td>...</td>\n",
              "      <td>0.453215</td>\n",
              "      <td>-0.064364</td>\n",
              "      <td>0.426858</td>\n",
              "      <td>-0.188550</td>\n",
              "      <td>-0.065089</td>\n",
              "      <td>-0.052815</td>\n",
              "      <td>-0.218357</td>\n",
              "      <td>-0.125432</td>\n",
              "      <td>-0.115256</td>\n",
              "      <td>0.293378</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>-0.028933</td>\n",
              "      <td>0.005041</td>\n",
              "      <td>-0.026545</td>\n",
              "      <td>0.017947</td>\n",
              "      <td>0.081377</td>\n",
              "      <td>-0.024016</td>\n",
              "      <td>0.050078</td>\n",
              "      <td>-0.069444</td>\n",
              "      <td>0.149295</td>\n",
              "      <td>0.070211</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.096051</td>\n",
              "      <td>-0.027530</td>\n",
              "      <td>-0.174598</td>\n",
              "      <td>-0.081625</td>\n",
              "      <td>-0.034160</td>\n",
              "      <td>-0.028405</td>\n",
              "      <td>0.123209</td>\n",
              "      <td>0.059400</td>\n",
              "      <td>0.013655</td>\n",
              "      <td>-0.135863</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>0.075142</td>\n",
              "      <td>0.095718</td>\n",
              "      <td>-0.007383</td>\n",
              "      <td>0.006771</td>\n",
              "      <td>-0.306417</td>\n",
              "      <td>-0.070639</td>\n",
              "      <td>0.033704</td>\n",
              "      <td>0.159575</td>\n",
              "      <td>-0.112173</td>\n",
              "      <td>-0.064303</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.146913</td>\n",
              "      <td>-0.042109</td>\n",
              "      <td>-0.267055</td>\n",
              "      <td>-0.124849</td>\n",
              "      <td>-0.052249</td>\n",
              "      <td>-0.043446</td>\n",
              "      <td>-0.091921</td>\n",
              "      <td>-0.052854</td>\n",
              "      <td>-0.002453</td>\n",
              "      <td>0.102104</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>0.019249</td>\n",
              "      <td>0.000377</td>\n",
              "      <td>-0.008984</td>\n",
              "      <td>0.016632</td>\n",
              "      <td>-0.051110</td>\n",
              "      <td>-0.020362</td>\n",
              "      <td>-0.009908</td>\n",
              "      <td>-0.010558</td>\n",
              "      <td>0.048476</td>\n",
              "      <td>0.050632</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.024562</td>\n",
              "      <td>-0.007040</td>\n",
              "      <td>-0.044647</td>\n",
              "      <td>-0.020873</td>\n",
              "      <td>-0.008735</td>\n",
              "      <td>-0.007263</td>\n",
              "      <td>0.019324</td>\n",
              "      <td>0.032896</td>\n",
              "      <td>0.068534</td>\n",
              "      <td>-0.064170</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>-0.004771</td>\n",
              "      <td>0.021399</td>\n",
              "      <td>-0.007702</td>\n",
              "      <td>-0.006904</td>\n",
              "      <td>-0.060830</td>\n",
              "      <td>-0.009667</td>\n",
              "      <td>-0.284591</td>\n",
              "      <td>-0.028424</td>\n",
              "      <td>0.074104</td>\n",
              "      <td>0.071945</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.090389</td>\n",
              "      <td>-0.025908</td>\n",
              "      <td>-0.164308</td>\n",
              "      <td>-0.076814</td>\n",
              "      <td>-0.032146</td>\n",
              "      <td>-0.026730</td>\n",
              "      <td>0.072543</td>\n",
              "      <td>0.072392</td>\n",
              "      <td>0.026580</td>\n",
              "      <td>-0.107631</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>-0.007162</td>\n",
              "      <td>0.010511</td>\n",
              "      <td>-0.006785</td>\n",
              "      <td>-0.026823</td>\n",
              "      <td>-0.066789</td>\n",
              "      <td>-0.006500</td>\n",
              "      <td>0.248698</td>\n",
              "      <td>-0.062673</td>\n",
              "      <td>0.056908</td>\n",
              "      <td>0.055307</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.065249</td>\n",
              "      <td>-0.018702</td>\n",
              "      <td>-0.118608</td>\n",
              "      <td>-0.055450</td>\n",
              "      <td>-0.023205</td>\n",
              "      <td>-0.019296</td>\n",
              "      <td>0.059670</td>\n",
              "      <td>0.058608</td>\n",
              "      <td>0.011664</td>\n",
              "      <td>-0.083311</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>0.003489</td>\n",
              "      <td>-0.014431</td>\n",
              "      <td>0.039730</td>\n",
              "      <td>-0.068199</td>\n",
              "      <td>-0.059941</td>\n",
              "      <td>0.168922</td>\n",
              "      <td>0.147445</td>\n",
              "      <td>0.108861</td>\n",
              "      <td>-0.140985</td>\n",
              "      <td>-0.101605</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.154839</td>\n",
              "      <td>-0.044380</td>\n",
              "      <td>-0.281462</td>\n",
              "      <td>-0.131584</td>\n",
              "      <td>-0.055067</td>\n",
              "      <td>-0.045790</td>\n",
              "      <td>-0.127574</td>\n",
              "      <td>-0.073718</td>\n",
              "      <td>-0.043143</td>\n",
              "      <td>0.160373</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>0.052429</td>\n",
              "      <td>-0.068824</td>\n",
              "      <td>0.006028</td>\n",
              "      <td>0.033259</td>\n",
              "      <td>-0.106072</td>\n",
              "      <td>-0.025250</td>\n",
              "      <td>-0.196811</td>\n",
              "      <td>0.039771</td>\n",
              "      <td>-0.117551</td>\n",
              "      <td>-0.075735</td>\n",
              "      <td>...</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.038330</td>\n",
              "      <td>-0.243090</td>\n",
              "      <td>-0.113645</td>\n",
              "      <td>-0.047560</td>\n",
              "      <td>-0.039547</td>\n",
              "      <td>-0.097473</td>\n",
              "      <td>-0.053934</td>\n",
              "      <td>-0.024131</td>\n",
              "      <td>0.117210</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>0.022825</td>\n",
              "      <td>0.018169</td>\n",
              "      <td>-0.014019</td>\n",
              "      <td>0.029632</td>\n",
              "      <td>-0.068011</td>\n",
              "      <td>-0.029853</td>\n",
              "      <td>-0.019449</td>\n",
              "      <td>-0.018677</td>\n",
              "      <td>0.028234</td>\n",
              "      <td>0.032310</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.038330</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.069675</td>\n",
              "      <td>-0.032573</td>\n",
              "      <td>-0.013632</td>\n",
              "      <td>-0.011335</td>\n",
              "      <td>0.009984</td>\n",
              "      <td>0.018236</td>\n",
              "      <td>0.061154</td>\n",
              "      <td>-0.045758</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>-0.125761</td>\n",
              "      <td>-0.068977</td>\n",
              "      <td>-0.002881</td>\n",
              "      <td>-0.073507</td>\n",
              "      <td>0.426129</td>\n",
              "      <td>-0.025027</td>\n",
              "      <td>-0.026958</td>\n",
              "      <td>-0.074723</td>\n",
              "      <td>0.088779</td>\n",
              "      <td>0.004265</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.243090</td>\n",
              "      <td>-0.069675</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.206581</td>\n",
              "      <td>-0.086453</td>\n",
              "      <td>-0.071888</td>\n",
              "      <td>0.032173</td>\n",
              "      <td>0.004821</td>\n",
              "      <td>-0.057431</td>\n",
              "      <td>-0.001676</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>0.029050</td>\n",
              "      <td>0.051460</td>\n",
              "      <td>0.009799</td>\n",
              "      <td>0.124019</td>\n",
              "      <td>0.003226</td>\n",
              "      <td>0.015810</td>\n",
              "      <td>0.095247</td>\n",
              "      <td>-0.087845</td>\n",
              "      <td>0.013275</td>\n",
              "      <td>0.052001</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.113645</td>\n",
              "      <td>-0.032573</td>\n",
              "      <td>-0.206581</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.040417</td>\n",
              "      <td>-0.033608</td>\n",
              "      <td>0.095535</td>\n",
              "      <td>0.026071</td>\n",
              "      <td>0.004635</td>\n",
              "      <td>-0.092422</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>0.061120</td>\n",
              "      <td>0.010865</td>\n",
              "      <td>-0.017395</td>\n",
              "      <td>0.045353</td>\n",
              "      <td>-0.089980</td>\n",
              "      <td>-0.030357</td>\n",
              "      <td>0.028929</td>\n",
              "      <td>-0.053320</td>\n",
              "      <td>0.053665</td>\n",
              "      <td>0.066291</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.047560</td>\n",
              "      <td>-0.013632</td>\n",
              "      <td>-0.086453</td>\n",
              "      <td>-0.040417</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.014065</td>\n",
              "      <td>0.035661</td>\n",
              "      <td>0.026627</td>\n",
              "      <td>0.106541</td>\n",
              "      <td>-0.091831</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>0.033475</td>\n",
              "      <td>0.001384</td>\n",
              "      <td>-0.012491</td>\n",
              "      <td>0.018811</td>\n",
              "      <td>-0.074278</td>\n",
              "      <td>-0.031792</td>\n",
              "      <td>-0.053488</td>\n",
              "      <td>-0.035423</td>\n",
              "      <td>0.054546</td>\n",
              "      <td>0.071680</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.039547</td>\n",
              "      <td>-0.011335</td>\n",
              "      <td>-0.071888</td>\n",
              "      <td>-0.033608</td>\n",
              "      <td>-0.014065</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.025795</td>\n",
              "      <td>0.032262</td>\n",
              "      <td>0.123240</td>\n",
              "      <td>-0.094508</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>-0.008377</td>\n",
              "      <td>0.020024</td>\n",
              "      <td>-0.023488</td>\n",
              "      <td>0.016565</td>\n",
              "      <td>0.112398</td>\n",
              "      <td>0.000931</td>\n",
              "      <td>-0.069878</td>\n",
              "      <td>-0.088182</td>\n",
              "      <td>0.715263</td>\n",
              "      <td>0.436729</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.097473</td>\n",
              "      <td>0.009984</td>\n",
              "      <td>0.032173</td>\n",
              "      <td>0.095535</td>\n",
              "      <td>0.035661</td>\n",
              "      <td>0.025795</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.071015</td>\n",
              "      <td>-0.064548</td>\n",
              "      <td>-0.740076</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>-0.021871</td>\n",
              "      <td>0.008748</td>\n",
              "      <td>-0.015419</td>\n",
              "      <td>0.008178</td>\n",
              "      <td>0.037032</td>\n",
              "      <td>-0.007114</td>\n",
              "      <td>-0.033025</td>\n",
              "      <td>-0.018895</td>\n",
              "      <td>0.384932</td>\n",
              "      <td>0.360163</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.053934</td>\n",
              "      <td>0.018236</td>\n",
              "      <td>0.004821</td>\n",
              "      <td>0.026071</td>\n",
              "      <td>0.026627</td>\n",
              "      <td>0.032262</td>\n",
              "      <td>-0.071015</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.037793</td>\n",
              "      <td>-0.433312</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>0.032141</td>\n",
              "      <td>0.028548</td>\n",
              "      <td>-0.023613</td>\n",
              "      <td>0.033107</td>\n",
              "      <td>-0.087610</td>\n",
              "      <td>-0.052044</td>\n",
              "      <td>-0.028486</td>\n",
              "      <td>-0.059563</td>\n",
              "      <td>0.234780</td>\n",
              "      <td>0.252633</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.024131</td>\n",
              "      <td>0.061154</td>\n",
              "      <td>-0.057431</td>\n",
              "      <td>0.004635</td>\n",
              "      <td>0.106541</td>\n",
              "      <td>0.123240</td>\n",
              "      <td>-0.064548</td>\n",
              "      <td>-0.037793</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.393855</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>0.002919</td>\n",
              "      <td>-0.033866</td>\n",
              "      <td>0.037753</td>\n",
              "      <td>-0.032908</td>\n",
              "      <td>-0.068683</td>\n",
              "      <td>0.027069</td>\n",
              "      <td>0.086364</td>\n",
              "      <td>0.108394</td>\n",
              "      <td>-0.881427</td>\n",
              "      <td>-0.652595</td>\n",
              "      <td>...</td>\n",
              "      <td>0.117210</td>\n",
              "      <td>-0.045758</td>\n",
              "      <td>-0.001676</td>\n",
              "      <td>-0.092422</td>\n",
              "      <td>-0.091831</td>\n",
              "      <td>-0.094508</td>\n",
              "      <td>-0.740076</td>\n",
              "      <td>-0.433312</td>\n",
              "      <td>-0.393855</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>44 rows × 44 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b0b7c2d5-5edc-4a2e-a4c3-7061f5094243')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b0b7c2d5-5edc-4a2e-a4c3-7061f5094243 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b0b7c2d5-5edc-4a2e-a4c3-7061f5094243');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-af13eed4-02e9-446c-adde-12150aee3eb4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-af13eed4-02e9-446c-adde-12150aee3eb4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-af13eed4-02e9-446c-adde-12150aee3eb4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 36
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x1000 with 2 Axes>"
            ],
            "image/png": "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ovqEo2vXrkpKStLgwYPD1p9zzjmtjlLl9Xrl8XjClt/534xmtQAAANCRnOqRqBilKkxUE46UlBSNHDlS27dvD1v/9ttvq3fv3i3GVFRUyOfzhS3XpZ8TzWoBAAAAOEUiblJVV1enHTt2NL/etWuXqqurlZ2drV69eunOO+/UNddco9GjR+uSSy7R8uXL9dxzz2nt2rUtbs/tdsvtdoetozkVAAAAcHqIOOHYvHmzLrnkkubX5eXlkqTJkydr4cKF+trXvqZ58+bJ6/Xqjjvu0MCBA/WHP/xBF198cfRqDQAAALSio44GFa8iTjiKiorkOM4xy3zrW9/St771LXOlAAAAAJweotqHAwAAAAD+WVSHxQUAAABOOZpUxRWecAAAAACIGRIOAAAAADETl02q6towLO7hxk6muHQFTXGHHNshzE05Yoqrb7Lt70jIFufSsQcIaE2i8Vlm0JgD+xNscXVtSLlTHVtwgvGYHkx0meLcxnr+eei9prgrtj1oivvLkP82xR1KsB4XW1yC7fQpzdVkC5TU4Njuidbvr994X0s27i8zsdEUdzhoq2etyxaX6dh+J4KyXWvW+2iyy3iRyl7XRuP3qUtSwBRX25Riims0fr4EY1yK8W+LkHF/DbLdK1JdtnrGM0apii884QAAAAAQMyQcAAAAAGIm4oRj/fr1Gj9+vPLy8uRyubRs2bKw910uV4vLj370o2jVGQAAAGiVE4rfpSOKOOHw+/0qKCjQ3LlzW3x/7969Ycvjjz8ul8ulq666qs2VBQAAANC+RJxwlJSU6MEHH9TXvva1Ft/Pzc0NW5555hldcsklOuuss9pcWQAAAKAjmTt3rvr06aPU1FSNGjVKmzZtarXsr371K/2///f/1LlzZ3Xu3Fljxow5qvyUKVOOaok0bty4mH6GmPbh2Ldvn/70pz/ppptuiuVuAAAAgGanutlUtJpUPfXUUyovL9f999+v1157TQUFBRo7dqz279/fYvm1a9fquuuu05o1a7RhwwadeeaZKi4u1kcffRRWbty4cWEtkn73u99ZD/UJiWnCsWjRImVmZurrX/96LHcDAAAAnHYeffRR3XLLLbrxxhs1ePBgzZs3T506ddLjjz/eYvnf/va3+s///E+de+65GjRokP73f/9XoVBIq1atCivndrvDWiR17tw5pp8jpgnH448/ruuvv16p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SUcS7Dn3GUHbXjsnNJjistICpjjf4VRTXMCxHZtal+22kuU0meJ6da41xe36zGOK6+Synfd6xz7cd3pioynus2CKKS6ze70p7vDHnU1xB4yHZkn+faa4f399piluzZB7THH1Ltv91338Ii061IaR5ZONvxWZxn9O3p9gm5WgU4LxmBo/X+IJDJrTkm11tu9EqmM7oOmO7f40IsVnikN8OXDggG6//XY999xzSkhI0FVXXaXHHntMGRkt/8154MAB3X///frLX/6i3bt3q1u3bpo4caJmzpwpj+cfv5GuFu5hv/vd73TttdeecN3iMuEAAAAArDriBHvXX3+99u7dq5UrV6qxsVE33nijbr31Vi1evLjF8nv27NGePXv0yCOPaPDgwXr//fd12223ac+ePVqyZElY2QULFmjcuHHNr88444yI6kbCAQAAALRjb775ppYvX65XX31V559/viTpZz/7ma644go98sgjysvLOypm6NChYVNZ9OvXT7NmzdI3v/lNNTU1KSnpH2nCGWecodzcXHP9Imoz4fV6NXLkSGVmZionJ0cTJ07U9u3bw8rs3LlTX/va19StWzdlZWXp6quv1r59+8wVBAAAAE4XgUBAtbW1YUsgYGs2/YUNGzbojDPOaE42JGnMmDFKSEjQK6+8csLb8fl8ysrKCks2JKm0tFRdu3bVBRdcoMcff/yE5ub7ZxElHOvWrVNpaak2btzY/LimuLhYfr9fkuT3+1VcXCyXy6XVq1frb3/7mxoaGjR+/HiFjG3zAQAAgEiE5MTt4vV65fF4whav19umz1tTU6OcnJywdUlJScrOzlZNTc0JbeOTTz7RzJkzdeutt4at/8EPfqDf//73Wrlypa666ir953/+p372s59FVL+ImlQtX7487PXChQuVk5OjqqoqjR49Wn/729/03nvvacuWLcrKypIkLVq0SJ07d9bq1as1ZsyYiCoHAAAAnE4qKipUXl4ets7tbnmYiLvvvlsPP/zwMbf35ptvtrlOtbW1uvLKKzV48GDNmDEj7L377vvHAB3Dhw+X3+/Xj370I91xxx0nvP029eHw+T4f1SA7O1vS54+IXC5X2EFLTU1VQkKCXnrpJRIOAAAAdGhut7vVBONffe9739OUKVOOWeass85Sbm6u9u/fH7a+qalJBw4cOG7fi0OHDmncuHHKzMzU0qVL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tG7d2upnkyZNwsCBA9G5c2eEh4fjjTfewMWLF/HDDz8osb1ERERERI0STvzf3UhqwBEfH4+YmBhERUU1ulxlZSU2bNiALl264N575e4mQkRERERELZfdA46UlBTk5OQgKSmpwWU++OADeHh4wMPDA7t27UJ6ejr0ernbxxIRERERUctl14Dj4sWLSEhIwMaNG2E0GhtcLi4uDrm5ucjMzMT999+P2NhYVFdX21zWZDKhvLzc6lEjeL0HEREREckRQjjt425k14AjOzsbJSUlCA8Ph06ng06nQ2ZmJpYtWwadTld3Ybi3tze6deuGgQMHYtu2bfj++++Rmppqc51JSUnw9va2emyq5F2tiIiIiIjuBHbNwxEZGYn8/HyrtgkTJiA4OBizZ8+GVnvzDJc3RnMmk8nmOhMTEzFr1iyrtiOBz9qzWURERERE5KTsGnB4enoiNDTUqs3d3R2+vr4IDQ3F+fPnsXnzZkRHR8PPzw8///wzkpOT4ebmhhEjRthcp8FggMFgsGrTa24euBARERERNcfdeuqSs3Jo4r/6jEYjDh48iBEjRiAwMBBPPvkkPD09cejQIbRr107JKCIiIiIiagHsOsJhS0ZGRt3/+/v748svv3R0lUREREREdIdweMBBRERERORMeEKVc1H0lCoiIiIiIqLf44CDiIiIiIjUI1qY6upqMW/ePFFdXc085jld3u3IZF7LzrsdmcxjnrNnMq9l5xHVpxGiZd03rLy8HN7e3igrK4OXlxfzmOdUebcjk3ktO+92ZDKPec6eybyWnUdUH0+pIiIiIiIi1XDAQUREREREquGAg4iIiIiIVNPiBhwGgwHz5s2DwWBgHvOcLu92ZDKvZefdjkzmMc/ZM5nXsvOI6mtxF40TEREREVHL0eKOcBARERERUcvBAQcREREREamGAw4iIiIiIlINBxxERERERKSaFjXgWLFiBTp37gyj0Yj+/fvj2LFjquQkJSWhb9++8PT0RLt27fDYY4+hoKBAlSxbkpOTodFoMGPGDFVzLl26hKeffhq+vr5wc3NDjx49cPz4cVWyzGYz5s6diy5dusDNzQ333XcfFixYAKXuWXDgwAGMHDkS/v7+0Gg02LFjh9XPhRD429/+hj/84Q9wc3NDVFQUzpw5o0pebW0tZs+ejR49esDd3R3+/v4YN24cCgsLpfOayqxvypQp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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# getting the upper triangle of the correlation matrix\n",
        "upper_tri = correlation_matrix.where(np.triu(np.ones(correlation_matrix.shape),k=1).astype(np.bool))\n",
        "print(upper_tri)\n",
        "\n",
        "# checking which columns can be dropped\n",
        "to_drop = [column for column in upper_tri.columns if any(upper_tri[column] > 0.95)]\n",
        "print('\\nTo drop')\n",
        "print(to_drop)\n",
        "\n",
        "# removing the selected columns\n",
        "X_train = X_train.drop(X_train.columns[to_drop], axis=1)\n",
        "X_test = X_test.drop(X_test.columns[to_drop], axis=1)\n",
        "print(X_train.head())\n",
        ""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "r9gKnAeQSvDu",
        "outputId": "924ef6ae-7701-4ec3-db32-b7d0dc127c4f"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "    0        1         2         3         4         5         6         7   \\\n",
            "0  NaN -0.16416 -0.015227  0.086632 -0.179804 -0.016287 -0.007087  0.005524   \n",
            "1  NaN      NaN -0.008288  0.046873 -0.021548  0.015159  0.018139  0.001410   \n",
            "2  NaN      NaN       NaN -0.071413 -0.004733  0.070133  0.005912  0.016081   \n",
            "3  NaN      NaN       NaN       NaN -0.064539 -0.090828  0.009663 -0.016481   \n",
            "4  NaN      NaN       NaN       NaN       NaN  0.041551 -0.030964 -0.029192   \n",
            "5  NaN      NaN       NaN       NaN       NaN       NaN  0.010779  0.012088   \n",
            "6  NaN      NaN       NaN       NaN       NaN       NaN       NaN  0.167007   \n",
            "7  NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "8  NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "9  NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "10 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "11 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "12 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "13 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "14 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "15 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "16 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "17 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "18 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "19 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "20 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "21 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "22 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "23 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "24 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "25 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "26 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "27 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "28 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "29 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "30 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "31 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "32 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "33 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "34 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "35 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "36 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "37 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "38 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "39 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "40 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "41 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "42 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "43 NaN      NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
            "\n",
            "          8         9   ...        34        35        36        37        38  \\\n",
            "0  -0.026688  0.002297  ...  0.052429  0.022825 -0.125761  0.029050  0.061120   \n",
            "1   0.006897  0.026724  ... -0.068824  0.018169 -0.068977  0.051460  0.010865   \n",
            "2  -0.027990 -0.020866  ...  0.006028 -0.014019 -0.002881  0.009799 -0.017395   \n",
            "3   0.003927  0.025602  ...  0.033259  0.029632 -0.073507  0.124019  0.045353   \n",
            "4   0.133308  0.043427  ... -0.106072 -0.068011  0.426129  0.003226 -0.089980   \n",
            "5  -0.019148 -0.011602  ... -0.025250 -0.029853 -0.025027  0.015810 -0.030357   \n",
            "6  -0.094614 -0.061620  ... -0.196811 -0.019449 -0.026958  0.095247  0.028929   \n",
            "7  -0.088567 -0.037563  ...  0.039771 -0.018677 -0.074723 -0.087845 -0.053320   \n",
            "8        NaN  0.555006  ... -0.117551  0.028234  0.088779  0.013275  0.053665   \n",
            "9        NaN       NaN  ... -0.075735  0.032310  0.004265  0.052001  0.066291   \n",
            "10       NaN       NaN  ... -0.005793  0.017802  0.028185 -0.004982  0.009132   \n",
            "11       NaN       NaN  ...  0.022677 -0.043171  0.163917 -0.046800 -0.042252   \n",
            "12       NaN       NaN  ...  0.014141 -0.016604 -0.010783  0.054759 -0.012266   \n",
            "13       NaN       NaN  ...  0.057443  0.000288 -0.069078 -0.013563  0.008511   \n",
            "14       NaN       NaN  ... -0.035616  0.019177 -0.083922  0.050214  0.009450   \n",
            "15       NaN       NaN  ...  0.011126  0.045255 -0.073433 -0.024283  0.086462   \n",
            "16       NaN       NaN  ...  0.007724 -0.002450 -0.030088  0.038438 -0.008198   \n",
            "17       NaN       NaN  ...  0.010280 -0.018375  0.055007 -0.013280 -0.030693   \n",
            "18       NaN       NaN  ... -0.014274  0.045965 -0.009419 -0.016401  0.026117   \n",
            "19       NaN       NaN  ... -0.038083 -0.013018 -0.036455 -0.011455 -0.006591   \n",
            "20       NaN       NaN  ...  0.002679  0.008015 -0.034297  0.014497  0.004063   \n",
            "21       NaN       NaN  ...  0.051110  0.001405 -0.033219 -0.011954  0.013571   \n",
            "22       NaN       NaN  ...  0.012696 -0.005204  0.010694  0.006288 -0.002178   \n",
            "23       NaN       NaN  ...  0.017731 -0.017288 -0.038674  0.018196 -0.011378   \n",
            "24       NaN       NaN  ... -0.028263  0.022471  0.034438 -0.024226  0.013905   \n",
            "25       NaN       NaN  ... -0.391858  0.048820 -0.362008  0.158738  0.033384   \n",
            "26       NaN       NaN  ... -0.073749  0.023783 -0.083221  0.039034  0.055199   \n",
            "27       NaN       NaN  ...  0.453215 -0.064364  0.426858 -0.188550 -0.065089   \n",
            "28       NaN       NaN  ... -0.096051 -0.027530 -0.174598 -0.081625 -0.034160   \n",
            "29       NaN       NaN  ... -0.146913 -0.042109 -0.267055 -0.124849 -0.052249   \n",
            "30       NaN       NaN  ... -0.024562 -0.007040 -0.044647 -0.020873 -0.008735   \n",
            "31       NaN       NaN  ... -0.090389 -0.025908 -0.164308 -0.076814 -0.032146   \n",
            "32       NaN       NaN  ... -0.065249 -0.018702 -0.118608 -0.055450 -0.023205   \n",
            "33       NaN       NaN  ... -0.154839 -0.044380 -0.281462 -0.131584 -0.055067   \n",
            "34       NaN       NaN  ...       NaN -0.038330 -0.243090 -0.113645 -0.047560   \n",
            "35       NaN       NaN  ...       NaN       NaN -0.069675 -0.032573 -0.013632   \n",
            "36       NaN       NaN  ...       NaN       NaN       NaN -0.206581 -0.086453   \n",
            "37       NaN       NaN  ...       NaN       NaN       NaN       NaN -0.040417   \n",
            "38       NaN       NaN  ...       NaN       NaN       NaN       NaN       NaN   \n",
            "39       NaN       NaN  ...       NaN       NaN       NaN       NaN       NaN   \n",
            "40       NaN       NaN  ...       NaN       NaN       NaN       NaN       NaN   \n",
            "41       NaN       NaN  ...       NaN       NaN       NaN       NaN       NaN   \n",
            "42       NaN       NaN  ...       NaN       NaN       NaN       NaN       NaN   \n",
            "43       NaN       NaN  ...       NaN       NaN       NaN       NaN       NaN   \n",
            "\n",
            "          39        40        41        42        43  \n",
            "0   0.033475 -0.008377 -0.021871  0.032141  0.002919  \n",
            "1   0.001384  0.020024  0.008748  0.028548 -0.033866  \n",
            "2  -0.012491 -0.023488 -0.015419 -0.023613  0.037753  \n",
            "3   0.018811  0.016565  0.008178  0.033107 -0.032908  \n",
            "4  -0.074278  0.112398  0.037032 -0.087610 -0.068683  \n",
            "5  -0.031792  0.000931 -0.007114 -0.052044  0.027069  \n",
            "6  -0.053488 -0.069878 -0.033025 -0.028486  0.086364  \n",
            "7  -0.035423 -0.088182 -0.018895 -0.059563  0.108394  \n",
            "8   0.054546  0.715263  0.384932  0.234780 -0.881427  \n",
            "9   0.071680  0.436729  0.360163  0.252633 -0.652595  \n",
            "10  0.009232  0.016243  0.011737  0.015092 -0.026078  \n",
            "11 -0.042742  0.002473 -0.002706 -0.050364  0.022805  \n",
            "12 -0.008690 -0.000211 -0.013737 -0.018309  0.015666  \n",
            "13 -0.002396 -0.017287 -0.017076 -0.011403  0.027918  \n",
            "14  0.022288  0.004011  0.006037  0.017075 -0.014243  \n",
            "15  0.059179 -0.005580 -0.003959  0.058491 -0.020693  \n",
            "16 -0.005022 -0.004467 -0.002514  0.002687  0.003629  \n",
            "17 -0.021678  0.001143 -0.001226 -0.023844  0.010791  \n",
            "18  0.050843  0.009046  0.038978  0.043782 -0.047462  \n",
            "19 -0.019010 -0.004145 -0.005799 -0.001837  0.007143  \n",
            "20  0.001967 -0.012894 -0.003045  0.014268  0.005306  \n",
            "21  0.016886 -0.010646 -0.013077 -0.001668  0.016003  \n",
            "22 -0.005765 -0.001144  0.003057 -0.005903  0.002114  \n",
            "23 -0.010427 -0.006884 -0.023622 -0.022812  0.028163  \n",
            "24  0.015415  0.008290  0.023498  0.028969 -0.032096  \n",
            "25  0.039109  0.204180  0.106340  0.105063 -0.267507  \n",
            "26  0.021368  0.005555  0.024524  0.008213 -0.020760  \n",
            "27 -0.052815 -0.218357 -0.125432 -0.115256  0.293378  \n",
            "28 -0.028405  0.123209  0.059400  0.013655 -0.135863  \n",
            "29 -0.043446 -0.091921 -0.052854 -0.002453  0.102104  \n",
            "30 -0.007263  0.019324  0.032896  0.068534 -0.064170  \n",
            "31 -0.026730  0.072543  0.072392  0.026580 -0.107631  \n",
            "32 -0.019296  0.059670  0.058608  0.011664 -0.083311  \n",
            "33 -0.045790 -0.127574 -0.073718 -0.043143  0.160373  \n",
            "34 -0.039547 -0.097473 -0.053934 -0.024131  0.117210  \n",
            "35 -0.011335  0.009984  0.018236  0.061154 -0.045758  \n",
            "36 -0.071888  0.032173  0.004821 -0.057431 -0.001676  \n",
            "37 -0.033608  0.095535  0.026071  0.004635 -0.092422  \n",
            "38 -0.014065  0.035661  0.026627  0.106541 -0.091831  \n",
            "39       NaN  0.025795  0.032262  0.123240 -0.094508  \n",
            "40       NaN       NaN -0.071015 -0.064548 -0.740076  \n",
            "41       NaN       NaN       NaN -0.037793 -0.433312  \n",
            "42       NaN       NaN       NaN       NaN -0.393855  \n",
            "43       NaN       NaN       NaN       NaN       NaN  \n",
            "\n",
            "[44 rows x 44 columns]\n",
            "\n",
            "To drop\n",
            "[]\n",
            "         0         1         2         3         4         5         6   \\\n",
            "0 -0.558648 -1.128982 -0.135502 -0.479519  0.893548 -0.436770 -0.097025   \n",
            "1  1.796571 -0.021201 -0.135502 -0.484989 -1.119134  2.289535  0.263477   \n",
            "2  0.666066 -0.021201 -0.135502  0.085987 -1.119134 -0.436770 -1.298699   \n",
            "3 -0.841275 -1.128982 -0.135502 -0.491552  0.893548 -0.436770  1.344984   \n",
            "4 -0.181813 -0.021201 -0.135502 -0.001518  0.893548  2.289535  1.585319   \n",
            "\n",
            "         7         8         9   ...        34        35        36       37  \\\n",
            "0 -0.250903  2.707694  0.777093  ... -0.365813 -0.102961  1.509537 -0.31054   \n",
            "1  0.748835 -0.415406 -0.307489  ... -0.365813 -0.102961 -0.662455 -0.31054   \n",
            "2 -0.584149 -0.415406 -0.307489  ... -0.365813 -0.102961 -0.662455 -0.31054   \n",
            "3 -0.584149 -0.415406 -0.307489  ... -0.365813 -0.102961  1.509537 -0.31054   \n",
            "4 -0.250903  2.130487  0.234802  ... -0.365813 -0.102961 -0.662455 -0.31054   \n",
            "\n",
            "         38        39        40        41        42        43  \n",
            "0 -0.128011 -0.111835 -0.347442  4.874651 -0.185947 -2.123465  \n",
            "1 -0.128011 -0.111835 -0.347442 -0.205143 -0.185947  0.470928  \n",
            "2 -0.128011 -0.111835 -0.347442 -0.205143 -0.185947  0.470928  \n",
            "3 -0.128011 -0.111835 -0.347442 -0.205143 -0.185947  0.470928  \n",
            "4 -0.128011 -0.111835  2.878180 -0.205143 -0.185947 -2.123465  \n",
            "\n",
            "[5 rows x 44 columns]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-37-7184b7cac085>:2: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  upper_tri = correlation_matrix.where(np.triu(np.ones(correlation_matrix.shape),k=1).astype(np.bool))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Apply PCA\n",
        "\n",
        "from sklearn.decomposition import PCA\n",
        "\n",
        "# apply the PCA for feature for feature reduction\n",
        "pca = PCA(n_components=0.95)\n",
        "pca.fit(X_train)\n",
        "PCA_X_train = pca.transform(X_train)\n",
        "PCA_X_test = pca.transform(X_test)\n",
        "\n",
        "X_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "HTvr9wNrS2L7",
        "outputId": "a14d915d-48ab-47e4-e08e-19db615e420a"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             0         1         2         3         4         5         6   \\\n",
              "0     -0.558648 -1.128982 -0.135502 -0.479519  0.893548 -0.436770 -0.097025   \n",
              "1      1.796571 -0.021201 -0.135502 -0.484989 -1.119134  2.289535  0.263477   \n",
              "2      0.666066 -0.021201 -0.135502  0.085987 -1.119134 -0.436770 -1.298699   \n",
              "3     -0.841275 -1.128982 -0.135502 -0.491552  0.893548 -0.436770  1.344984   \n",
              "4     -0.181813 -0.021201 -0.135502 -0.001518  0.893548  2.289535  1.585319   \n",
              "...         ...       ...       ...       ...       ...       ...       ...   \n",
              "36068 -0.747066  1.086579 -0.135502  0.232195 -1.119134 -0.436770 -0.217193   \n",
              "36069 -0.558648  1.086579 -0.135502 -0.387274  0.893548 -0.436770  1.104649   \n",
              "36070 -1.123901 -3.344543 -0.135502 -0.233045 -1.119134 -0.436770 -0.938197   \n",
              "36071 -1.312319 -0.021201 -0.135502 -0.358834  0.893548 -0.436770 -0.097025   \n",
              "36072 -0.087605 -0.021201 -0.135502 -0.433214  0.893548 -0.436770 -0.577695   \n",
              "\n",
              "             7         8         9   ...        34        35        36  \\\n",
              "0     -0.250903  2.707694  0.777093  ... -0.365813 -0.102961  1.509537   \n",
              "1      0.748835 -0.415406 -0.307489  ... -0.365813 -0.102961 -0.662455   \n",
              "2     -0.584149 -0.415406 -0.307489  ... -0.365813 -0.102961 -0.662455   \n",
              "3     -0.584149 -0.415406 -0.307489  ... -0.365813 -0.102961  1.509537   \n",
              "4     -0.250903  2.130487  0.234802  ... -0.365813 -0.102961 -0.662455   \n",
              "...         ...       ...       ...  ...       ...       ...       ...   \n",
              "36068 -0.250903  1.563588  0.234802  ... -0.365813 -0.102961 -0.662455   \n",
              "36069  0.748835 -0.415406 -0.307489  ... -0.365813 -0.102961 -0.662455   \n",
              "36070 -0.584149 -0.415406 -0.307489  ... -0.365813 -0.102961 -0.662455   \n",
              "36071 -0.584149 -0.415406 -0.307489  ... -0.365813 -0.102961  1.509537   \n",
              "36072 -0.584149 -0.415406 -0.307489  ... -0.365813 -0.102961 -0.662455   \n",
              "\n",
              "            37        38        39        40        41        42        43  \n",
              "0     -0.31054 -0.128011 -0.111835 -0.347442  4.874651 -0.185947 -2.123465  \n",
              "1     -0.31054 -0.128011 -0.111835 -0.347442 -0.205143 -0.185947  0.470928  \n",
              "2     -0.31054 -0.128011 -0.111835 -0.347442 -0.205143 -0.185947  0.470928  \n",
              "3     -0.31054 -0.128011 -0.111835 -0.347442 -0.205143 -0.185947  0.470928  \n",
              "4     -0.31054 -0.128011 -0.111835  2.878180 -0.205143 -0.185947 -2.123465  \n",
              "...        ...       ...       ...       ...       ...       ...       ...  \n",
              "36068 -0.31054 -0.128011 -0.111835  2.878180 -0.205143 -0.185947 -2.123465  \n",
              "36069 -0.31054 -0.128011 -0.111835 -0.347442 -0.205143 -0.185947  0.470928  \n",
              "36070 -0.31054 -0.128011 -0.111835 -0.347442 -0.205143 -0.185947  0.470928  \n",
              "36071 -0.31054 -0.128011 -0.111835 -0.347442 -0.205143 -0.185947  0.470928  \n",
              "36072 -0.31054 -0.128011 -0.111835 -0.347442 -0.205143 -0.185947  0.470928  \n",
              "\n",
              "[36073 rows x 44 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-860904e7-ef66-4952-a29d-1b421bbf79e4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>34</th>\n",
              "      <th>35</th>\n",
              "      <th>36</th>\n",
              "      <th>37</th>\n",
              "      <th>38</th>\n",
              "      <th>39</th>\n",
              "      <th>40</th>\n",
              "      <th>41</th>\n",
              "      <th>42</th>\n",
              "      <th>43</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.558648</td>\n",
              "      <td>-1.128982</td>\n",
              "      <td>-0.135502</td>\n",
              "      <td>-0.479519</td>\n",
              "      <td>0.893548</td>\n",
              "      <td>-0.436770</td>\n",
              "      <td>-0.097025</td>\n",
              "      <td>-0.250903</td>\n",
              "      <td>2.707694</td>\n",
              "      <td>0.777093</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.365813</td>\n",
              "      <td>-0.102961</td>\n",
              "      <td>1.509537</td>\n",
              "      <td>-0.31054</td>\n",
              "      <td>-0.128011</td>\n",
              "      <td>-0.111835</td>\n",
              "      <td>-0.347442</td>\n",
              "      <td>4.874651</td>\n",
              "      <td>-0.185947</td>\n",
              "      <td>-2.123465</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.796571</td>\n",
              "      <td>-0.021201</td>\n",
              "      <td>-0.135502</td>\n",
              "      <td>-0.484989</td>\n",
              "      <td>-1.119134</td>\n",
              "      <td>2.289535</td>\n",
              "      <td>0.263477</td>\n",
              "      <td>0.748835</td>\n",
              "      <td>-0.415406</td>\n",
              "      <td>-0.307489</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.365813</td>\n",
              "      <td>-0.102961</td>\n",
              "      <td>-0.662455</td>\n",
              "      <td>-0.31054</td>\n",
              "      <td>-0.128011</td>\n",
              "      <td>-0.111835</td>\n",
              "      <td>-0.347442</td>\n",
              "      <td>-0.205143</td>\n",
              "      <td>-0.185947</td>\n",
              "      <td>0.470928</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.666066</td>\n",
              "      <td>-0.021201</td>\n",
              "      <td>-0.135502</td>\n",
              "      <td>0.085987</td>\n",
              "      <td>-1.119134</td>\n",
              "      <td>-0.436770</td>\n",
              "      <td>-1.298699</td>\n",
              "      <td>-0.584149</td>\n",
              "      <td>-0.415406</td>\n",
              "      <td>-0.307489</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.365813</td>\n",
              "      <td>-0.102961</td>\n",
              "      <td>-0.662455</td>\n",
              "      <td>-0.31054</td>\n",
              "      <td>-0.128011</td>\n",
              "      <td>-0.111835</td>\n",
              "      <td>-0.347442</td>\n",
              "      <td>-0.205143</td>\n",
              "      <td>-0.185947</td>\n",
              "      <td>0.470928</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.841275</td>\n",
              "      <td>-1.128982</td>\n",
              "      <td>-0.135502</td>\n",
              "      <td>-0.491552</td>\n",
              "      <td>0.893548</td>\n",
              "      <td>-0.436770</td>\n",
              "      <td>1.344984</td>\n",
              "      <td>-0.584149</td>\n",
              "      <td>-0.415406</td>\n",
              "      <td>-0.307489</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.365813</td>\n",
              "      <td>-0.102961</td>\n",
              "      <td>1.509537</td>\n",
              "      <td>-0.31054</td>\n",
              "      <td>-0.128011</td>\n",
              "      <td>-0.111835</td>\n",
              "      <td>-0.347442</td>\n",
              "      <td>-0.205143</td>\n",
              "      <td>-0.185947</td>\n",
              "      <td>0.470928</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.181813</td>\n",
              "      <td>-0.021201</td>\n",
              "      <td>-0.135502</td>\n",
              "      <td>-0.001518</td>\n",
              "      <td>0.893548</td>\n",
              "      <td>2.289535</td>\n",
              "      <td>1.585319</td>\n",
              "      <td>-0.250903</td>\n",
              "      <td>2.130487</td>\n",
              "      <td>0.234802</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.365813</td>\n",
              "      <td>-0.102961</td>\n",
              "      <td>-0.662455</td>\n",
              "      <td>-0.31054</td>\n",
              "      <td>-0.128011</td>\n",
              "      <td>-0.111835</td>\n",
              "      <td>2.878180</td>\n",
              "      <td>-0.205143</td>\n",
              "      <td>-0.185947</td>\n",
              "      <td>-2.123465</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36068</th>\n",
              "      <td>-0.747066</td>\n",
              "      <td>1.086579</td>\n",
              "      <td>-0.135502</td>\n",
              "      <td>0.232195</td>\n",
              "      <td>-1.119134</td>\n",
              "      <td>-0.436770</td>\n",
              "      <td>-0.217193</td>\n",
              "      <td>-0.250903</td>\n",
              "      <td>1.563588</td>\n",
              "      <td>0.234802</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.365813</td>\n",
              "      <td>-0.102961</td>\n",
              "      <td>-0.662455</td>\n",
              "      <td>-0.31054</td>\n",
              "      <td>-0.128011</td>\n",
              "      <td>-0.111835</td>\n",
              "      <td>2.878180</td>\n",
              "      <td>-0.205143</td>\n",
              "      <td>-0.185947</td>\n",
              "      <td>-2.123465</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36069</th>\n",
              "      <td>-0.558648</td>\n",
              "      <td>1.086579</td>\n",
              "      <td>-0.135502</td>\n",
              "      <td>-0.387274</td>\n",
              "      <td>0.893548</td>\n",
              "      <td>-0.436770</td>\n",
              "      <td>1.104649</td>\n",
              "      <td>0.748835</td>\n",
              "      <td>-0.415406</td>\n",
              "      <td>-0.307489</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.365813</td>\n",
              "      <td>-0.102961</td>\n",
              "      <td>-0.662455</td>\n",
              "      <td>-0.31054</td>\n",
              "      <td>-0.128011</td>\n",
              "      <td>-0.111835</td>\n",
              "      <td>-0.347442</td>\n",
              "      <td>-0.205143</td>\n",
              "      <td>-0.185947</td>\n",
              "      <td>0.470928</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36070</th>\n",
              "      <td>-1.123901</td>\n",
              "      <td>-3.344543</td>\n",
              "      <td>-0.135502</td>\n",
              "      <td>-0.233045</td>\n",
              "      <td>-1.119134</td>\n",
              "      <td>-0.436770</td>\n",
              "      <td>-0.938197</td>\n",
              "      <td>-0.584149</td>\n",
              "      <td>-0.415406</td>\n",
              "      <td>-0.307489</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.365813</td>\n",
              "      <td>-0.102961</td>\n",
              "      <td>-0.662455</td>\n",
              "      <td>-0.31054</td>\n",
              "      <td>-0.128011</td>\n",
              "      <td>-0.111835</td>\n",
              "      <td>-0.347442</td>\n",
              "      <td>-0.205143</td>\n",
              "      <td>-0.185947</td>\n",
              "      <td>0.470928</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36071</th>\n",
              "      <td>-1.312319</td>\n",
              "      <td>-0.021201</td>\n",
              "      <td>-0.135502</td>\n",
              "      <td>-0.358834</td>\n",
              "      <td>0.893548</td>\n",
              "      <td>-0.436770</td>\n",
              "      <td>-0.097025</td>\n",
              "      <td>-0.584149</td>\n",
              "      <td>-0.415406</td>\n",
              "      <td>-0.307489</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.365813</td>\n",
              "      <td>-0.102961</td>\n",
              "      <td>1.509537</td>\n",
              "      <td>-0.31054</td>\n",
              "      <td>-0.128011</td>\n",
              "      <td>-0.111835</td>\n",
              "      <td>-0.347442</td>\n",
              "      <td>-0.205143</td>\n",
              "      <td>-0.185947</td>\n",
              "      <td>0.470928</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36072</th>\n",
              "      <td>-0.087605</td>\n",
              "      <td>-0.021201</td>\n",
              "      <td>-0.135502</td>\n",
              "      <td>-0.433214</td>\n",
              "      <td>0.893548</td>\n",
              "      <td>-0.436770</td>\n",
              "      <td>-0.577695</td>\n",
              "      <td>-0.584149</td>\n",
              "      <td>-0.415406</td>\n",
              "      <td>-0.307489</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.365813</td>\n",
              "      <td>-0.102961</td>\n",
              "      <td>-0.662455</td>\n",
              "      <td>-0.31054</td>\n",
              "      <td>-0.128011</td>\n",
              "      <td>-0.111835</td>\n",
              "      <td>-0.347442</td>\n",
              "      <td>-0.205143</td>\n",
              "      <td>-0.185947</td>\n",
              "      <td>0.470928</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>36073 rows × 44 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-860904e7-ef66-4952-a29d-1b421bbf79e4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-860904e7-ef66-4952-a29d-1b421bbf79e4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-860904e7-ef66-4952-a29d-1b421bbf79e4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4a98e072-ed17-45bd-91ad-b1b556653ea9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4a98e072-ed17-45bd-91ad-b1b556653ea9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4a98e072-ed17-45bd-91ad-b1b556653ea9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Developing MLP\n",
        "\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "\n",
        "#definisi dan latih data dengan MPL\n",
        "mlp = MLPClassifier(hidden_layer_sizes=(50,200,50), max_iter=300, activation='relu', solver='adam', random_state=1)\n",
        "mlp.fit(PCA_X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "1hXQdp_RS99y",
        "outputId": "841d74d9-0e11-4e3d-935d-291c783e2780"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MLPClassifier(hidden_layer_sizes=(50, 200, 50), max_iter=300, random_state=1)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>MLPClassifier(hidden_layer_sizes=(50, 200, 50), max_iter=300, random_state=1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">MLPClassifier</label><div class=\"sk-toggleable__content\"><pre>MLPClassifier(hidden_layer_sizes=(50, 200, 50), max_iter=300, random_state=1)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "PCA_X_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OUZiawcsTLDn",
        "outputId": "40bc96e0-1424-47a3-9be2-fe7d3708cec3"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 3.17428136,  2.9417411 ,  1.10190984, ..., -0.7581117 ,\n",
              "        -0.06754851, -0.08753574],\n",
              "       [-0.45357695, -2.77266654,  2.74546928, ...,  0.35935679,\n",
              "        -0.51365627, -0.72655917],\n",
              "       [-0.28609767, -1.77098747,  0.85752515, ..., -1.11515942,\n",
              "        -0.22941411, -0.16754282],\n",
              "       ...,\n",
              "       [ 0.32611861, -0.83789589, -1.5608128 , ...,  0.96349741,\n",
              "         1.89423924,  3.23526765],\n",
              "       [-0.2452907 ,  0.84814249, -2.59078885, ..., -0.11918013,\n",
              "        -0.39904162, -0.09239883],\n",
              "       [-0.34673753, -0.82099457,  0.23221502, ..., -1.23767651,\n",
              "        -0.6650229 , -0.04314375]])"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "PCA_X_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yQzc-WwcXXy-",
        "outputId": "8c733349-f6a8-4945-ef71-eb51ddbada93"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-1.64663824,  1.40370779, -2.24966465, ..., -0.48223121,\n",
              "        -1.1997105 , -0.45796088],\n",
              "       [-1.52144235,  2.20419325, -2.58044764, ...,  0.07456786,\n",
              "         0.35472527, -0.09268382],\n",
              "       [-0.85229301, -1.58346296,  2.98215684, ..., -0.32719171,\n",
              "         0.19450904, -1.12785243],\n",
              "       ...,\n",
              "       [ 0.08385285, -2.47050324, -1.38446674, ..., -0.75069609,\n",
              "        -0.03547406, -0.23650878],\n",
              "       [ 0.04182242, -1.28646737, -0.11425938, ...,  0.40366801,\n",
              "         0.55891596, -0.42550741],\n",
              "       [-0.06592012, -1.80075662,  1.12078982, ...,  0.38745916,\n",
              "        -0.63691763,  1.71135068]])"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print('Accuracy')\n",
        "print(mlp.score(PCA_X_test, y_test)) # masalahnya\n",
        "\n",
        "# confusion matrix\n",
        "predict = mlp.predict(PCA_X_test)\n",
        "\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "confusion_matrix = confusion_matrix(y_test, predict)\n",
        "fig, ax = plt.subplots(1)\n",
        "ax = sns.heatmap(confusion_matrix, ax=ax, cmap=plt.cm.Blues, annot=True)\n",
        "plt.ylabel('True value')\n",
        "plt.xlabel('Predicted value')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        },
        "id": "PJqEA56ET5kg",
        "outputId": "77264320-6ae5-4550-cb3c-df45e2bea206"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy\n",
            "0.8546402040137487\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.metrics import accuracy_score, mean_squared_error\n",
        "\n",
        "# print the training error dan MSE\n",
        "print(\"Training error: %f\" % mlp.loss_curve_[-1])\n",
        "print(\"Training set score: %f\" % mlp.score(PCA_X_train, y_train))\n",
        "print(\"Test set score: %f\" % mlp.score(PCA_X_test, y_test))\n",
        "print(accuracy_score(y_test, predict))\n",
        "\n",
        "print(\"MSE: %f\" % mean_squared_error(y_test, predict))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M0khrWq9UE14",
        "outputId": "eef2ed1a-ed58-40e3-9930-c06af3141c2f"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training error: 0.089994\n",
            "Training set score: 0.972001\n",
            "Test set score: 0.854640\n",
            "0.8546402040137487\n",
            "MSE: 0.145360\n"
          ]
        }
      ]
    }
  ]
}